Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.4.196 Build 20170411

Compiler options: -qopenmp -qopt-report=5 -xHost -align -O3 -g -mkl -heap-arrays -parallel -std=c++11 -c -lm

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (std::char_traits<char>::length(const std::char_traits<char>::char_type *)) [2/83=2.4%] /usr/include/c++/5/bits/char_traits.h(267,7)
  -> EXTERN: (267,16) __builtin_strlen(const char *)


    Report from: Code generation optimizations [cg]

/usr/include/c++/5/bits/char_traits.h(267,7):remark #34051: REGISTER ALLOCATION : [_ZNSt11char_traitsIcE6lengthEPKc] /usr/include/c++/5/bits/char_traits.h:267

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       7
            Local     :       5
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: prox_2norm(float *, float *, float *, float, int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (prox_2norm(float *, float *, float *, float, int, int, int)) [6/83=7.2%] cuda_dpposeEstimation.cpp(514,1)
  -> EXTERN: (516,31) operator new[](std::size_t)
  -> EXTERN: (516,31) __cxa_throw_bad_array_new_length()
  -> EXTERN: (555,15) operator new[](std::size_t)
  -> EXTERN: (556,15) operator new[](std::size_t)
  -> EXTERN: (557,11) operator new[](std::size_t)
  -> EXTERN: (558,12) operator new[](std::size_t)
  -> EXTERN: (560,16) operator new[](std::size_t)
  -> EXTERN: (561,13) operator new[](std::size_t)
  -> EXTERN: (562,16) operator new[](std::size_t)
  -> EXTERN: (563,16) operator new[](std::size_t)
  -> EXTERN: (570,10) LAPACKE_sgesvd(int, char, char, int, int, float *, int, float *, float *, int, float *, int, float *)
  -> (574,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (574,61) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> INLINE: (615,3) cpuMatrixMult(float *, float *, float *, int, int, int) (isz = 55) (sz = 70)
  -> INLINE: (616,3) cpuMatrixMult(float *, float *, float *, int, int, int) (isz = 55) (sz = 70)
  -> EXTERN: (628,2) operator delete[](void *)
  -> EXTERN: (629,2) operator delete[](void *)
  -> EXTERN: (630,2) operator delete[](void *)
  -> EXTERN: (631,2) operator delete[](void *)
  -> EXTERN: (632,2) operator delete[](void *)
  -> EXTERN: (633,2) operator delete[](void *)
  -> EXTERN: (634,2) operator delete[](void *)
  -> EXTERN: (635,2) operator delete[](void *)
  -> EXTERN: (641,2) operator delete[](void *)


    Report from: OpenMP optimizations [openmp]

cuda_dpposeEstimation.cpp(551:1-551:1):OMP:_Z10prox_2normPfS_S_fiii:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(540,3)
   remark #25444: Loopnest Interchanged: ( 1 2 3 ) --> ( 2 1 3 )
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override    [ cuda_dpposeEstimation.cpp(540,3) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <Q_re[i*6+j*3+k]>, stride is 3   [ cuda_dpposeEstimation.cpp(547,4) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <Q[i*3+j*col+k]>, stride is unknown to compiler   [ cuda_dpposeEstimation.cpp(547,30) ]
   remark #15305: vectorization support: vector length 2   [ cuda_dpposeEstimation.cpp(540,3) ]
   remark #15452: unmasked strided loads: 1    [ cuda_dpposeEstimation.cpp(540,3) ]
   remark #15453: unmasked strided stores: 1    [ cuda_dpposeEstimation.cpp(540,3) ]
   remark #15475: --- begin vector cost summary ---   [ cuda_dpposeEstimation.cpp(540,3) ]
   remark #15476: scalar cost: 5    [ cuda_dpposeEstimation.cpp(540,3) ]
   remark #15477: vector cost: 7.500    [ cuda_dpposeEstimation.cpp(540,3) ]
   remark #15478: estimated potential speedup: 0.660    [ cuda_dpposeEstimation.cpp(540,3) ]
   remark #15488: --- end vector cost summary ---   [ cuda_dpposeEstimation.cpp(540,3) ]
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(535,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <Q_re[i*6+j*3+k]>, stride is 6   [ cuda_dpposeEstimation.cpp(547,4) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <Q[i*3+j*col+k]>, stride is 3   [ cuda_dpposeEstimation.cpp(547,30) ]
      remark #15305: vectorization support: vector length 4
      remark #15315: loop was not vectorized: estimated number of iterations (2) is insufficient for vectorization
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #25015: Estimate of max trip count of loop=2

      LOOP BEGIN at cuda_dpposeEstimation.cpp(542,4)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference Q_re[i*6+j*3+k] has unaligned access   [ cuda_dpposeEstimation.cpp(547,4) ]
         remark #15389: vectorization support: reference Q[i*3+j*col+k] has unaligned access   [ cuda_dpposeEstimation.cpp(547,30) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 4.000 
         remark #15478: estimated potential speedup: 0.780 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 3  
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(552,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(566,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference Qtemp[j] has unaligned access   [ cuda_dpposeEstimation.cpp(568,4) ]
      remark #15389: vectorization support: reference Q_re has unaligned access   [ cuda_dpposeEstimation.cpp(568,15) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 1.250 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(594,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <vt1[j*3+k]>, stride is 3   [ cuda_dpposeEstimation.cpp(598,5) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <vt[j*3+k]>, stride is 3   [ cuda_dpposeEstimation.cpp(598,22) ]
      remark #15305: vectorization support: vector length 2
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 5.500 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 2  

      LOOP BEGIN at cuda_dpposeEstimation.cpp(596,4)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference vt1[j*3+k] has unaligned access   [ cuda_dpposeEstimation.cpp(598,5) ]
         remark #15389: vectorization support: reference vt[j*3+k] has unaligned access   [ cuda_dpposeEstimation.cpp(598,22) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 4.000 
         remark #15478: estimated potential speedup: 0.780 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 3  
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(596,4)
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(601,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference sigma[j] has unaligned access   [ cuda_dpposeEstimation.cpp(607,25) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <sigma1[j*2+k]>, masked, stride is 2   [ cuda_dpposeEstimation.cpp(607,5) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <sigma1[j*2+k]>, stride is 2   [ cuda_dpposeEstimation.cpp(611,5) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <sigma1[j*2+k]>, stride is 2   [ cuda_dpposeEstimation.cpp(611,5) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.036
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15456: masked unaligned unit stride loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 13 
      remark #15477: vector cost: 42.000 
      remark #15478: estimated potential speedup: 0.290 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 2  

      LOOP BEGIN at cuda_dpposeEstimation.cpp(603,4)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference sigma1[j*2+k] has unaligned access   [ cuda_dpposeEstimation.cpp(607,5) ]
         remark #15389: vectorization support: reference sigma1[j*2+k] has unaligned access   [ cuda_dpposeEstimation.cpp(611,5) ]
         remark #15389: vectorization support: reference sigma1[j*2+k] has unaligned access   [ cuda_dpposeEstimation.cpp(607,5) ]
         remark #15389: vectorization support: reference sigma1[j*2+k] has unaligned access   [ cuda_dpposeEstimation.cpp(611,5) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.484
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 13 
         remark #15477: vector cost: 15.500 
         remark #15478: estimated potential speedup: 0.560 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 2  
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(603,4)
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(615,3)
      remark #25461: Imperfect Loop Unroll-Jammed by 2   (pre-vector) 
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference sigma1[k*2+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
      remark #15389: vectorization support: reference Qtemp1[i*2+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
      remark #15389: vectorization support: reference sigma1[k*2+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
      remark #15389: vectorization support: reference Qtemp1[i*2+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.711
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 27 
      remark #15477: vector cost: 19.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 2  

      LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(615,3)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference u[i*2+k] has unaligned access   [ cuda_dpposeEstimation.cpp(235,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <sigma1[k*2+j]>, stride is 2   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15305: vectorization support: vector length 2
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 1.778
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 4.500 
         remark #15478: estimated potential speedup: 0.640 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 2  
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(615,3)
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(615,3)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference u[i*2+k] has unaligned access   [ cuda_dpposeEstimation.cpp(235,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <sigma1[k*2+j]>, stride is 2   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15305: vectorization support: vector length 2
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 1.778
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 4.500 
         remark #15478: estimated potential speedup: 0.640 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 2  
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(228,2) inlined into cuda_dpposeEstimation.cpp(616,3)
      remark #25101: Loop Interchange not done due to: Original Order seems proper
      remark #25452: Original Order found to be proper, but by a close margin
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <Qtemp1[i*2+k]>, stride is 2   [ cuda_dpposeEstimation.cpp(235,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <Qtemp2[i*3+j]>, stride is 3   [ cuda_dpposeEstimation.cpp(239,3) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.350
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 14 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 1.030 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 2  

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(616,3)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference vt1[k*3+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference Qtemp2[i*3+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.684
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 14 
         remark #15477: vector cost: 9.500 
         remark #15478: estimated potential speedup: 0.910 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 3  

         LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(616,3)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15389: vectorization support: reference Qtemp1[i*2+k] has unaligned access   [ cuda_dpposeEstimation.cpp(235,13) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <vt1[k*3+j]>, stride is 3   [ cuda_dpposeEstimation.cpp(235,30) ]
            remark #15305: vectorization support: vector length 2
            remark #15427: loop was completely unrolled
            remark #15309: vectorization support: normalized vectorization overhead 1.778
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15452: unmasked strided loads: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 8 
            remark #15477: vector cost: 4.500 
            remark #15478: estimated potential speedup: 0.640 
            remark #15488: --- end vector cost summary ---
            remark #25436: completely unrolled by 2  
         LOOP END

         LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(616,3)
         LOOP END

         LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(616,3)
         LOOP END
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(616,3)

         LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(616,3)
         LOOP END

         LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(616,3)
         LOOP END

         LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(616,3)
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(617,3)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between M[i*3+j*col+k] (621:25) and M[i*3+j*col+k] (621:25)
      remark #17106: parallel dependence: assumed OUTPUT dependence between M[i*3+j*col+k] (621:25) and M[i*3+j*col+k] (621:25)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between M[i*3+j*col+k] (621:25) and M[i*3+j*col+k] (621:25)
      remark #15346: vector dependence: assumed OUTPUT dependence between M[i*3+j*col+k] (621:25) and M[i*3+j*col+k] (621:25)
      remark #25436: completely unrolled by 2  

      LOOP BEGIN at cuda_dpposeEstimation.cpp(619,25)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference M[i*3+j*col+k] has unaligned access   [ cuda_dpposeEstimation.cpp(621,25) ]
         remark #15389: vectorization support: reference Qtemp2[j*3+k] has unaligned access   [ cuda_dpposeEstimation.cpp(621,52) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 4.000 
         remark #15478: estimated potential speedup: 0.780 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 3  
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(619,25)
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(566,3)
   <Remainder loop for vectorization>
      remark #25436: completely unrolled by 2  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(514,1):remark #34051: REGISTER ALLOCATION : [_Z10prox_2normPfS_S_fiii] cuda_dpposeEstimation.cpp:514

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     272
            Global    :      74
            Local     :     198
        Regenerable   :      87
        Spilled       :      22
        
    Routine stack
        Variables     :      84 bytes*
            Reads     :       7 [2.80e+00 ~ 0.2%]
            Writes    :      16 [3.14e+01 ~ 2.6%]
        Spills        :     216 bytes*
            Reads     :      43 [1.47e+02 ~ 12.4%]
            Writes    :      35 [6.21e+01 ~ 5.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calculateZ(float *, float *, float *, float *, float *, float *, float, float *, float *, int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calculateZ(float *, float *, float *, float *, float *, float *, float, float *, float *, int, int, int)) [7/83=8.4%] cuda_dpposeEstimation.cpp(381,1)
  -> EXTERN: (382,31) operator new[](std::size_t)
  -> EXTERN: (382,31) __cxa_throw_bad_array_new_length()
  -> EXTERN: (383,32) operator new[](std::size_t)
  -> EXTERN: (383,32) __cxa_throw_bad_array_new_length()
  -> EXTERN: (384,32) operator new[](std::size_t)
  -> EXTERN: (384,32) __cxa_throw_bad_array_new_length()
  -> EXTERN: (385,31) operator new[](std::size_t)
  -> EXTERN: (385,31) __cxa_throw_bad_array_new_length()
  -> EXTERN: (386,32) operator new[](std::size_t)
  -> EXTERN: (386,32) __cxa_throw_bad_array_new_length()
  -> EXTERN: (387,35) operator new[](std::size_t)
  -> EXTERN: (387,35) __cxa_throw_bad_array_new_length()
  -> INLINE: (404,2) cpuMatrixMult(float *, float *, float *, int, int, int) (isz = 55) (sz = 70)
  -> INLINE: (408,2) scalarToMatrixMultiply(float *, float *, float, int, int) (isz = 32) (sz = 45)
  -> INLINE: (412,2) sumOfMatrix(float *, float *, float *, float *, int, int) (isz = 42) (sz = 57)
  -> INLINE: (416,2) addScalarToDiagonal(float *, float *, float, int, int) (isz = 47) (sz = 60)
  -> INLINE: (425,11) matInv(float *, int) (isz = 49) (sz = 59)
    -> EXTERN: (362,6) _vla_alloc(long)
    -> EXTERN: (362,6) _vla_free(void *, long)
    -> EXTERN: (365,8) LAPACKE_sgetrf(int, int, int, float *, int, int *)
    -> EXTERN: (369,10) _vla_free(void *, long)
    -> EXTERN: (372,8) LAPACKE_sgetri(int, int, float *, int, const int *)
    -> EXTERN: (375,9) _vla_free(void *, long)
  -> INLINE: (435,9) cpuMatrixMult(float *, float *, float *, int, int, int) (isz = 55) (sz = 70)
  -> EXTERN: (442,2) operator delete[](void *)
  -> EXTERN: (443,2) operator delete[](void *)
  -> EXTERN: (444,2) operator delete[](void *)
  -> EXTERN: (445,2) operator delete[](void *)
  -> EXTERN: (446,2) operator delete[](void *)
  -> EXTERN: (447,2) operator delete[](void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(393,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(395,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(395,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference temp[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(397,3) ]
      remark #15389: vectorization support: reference xy[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(397,23) ]
      remark #15389: vectorization support: reference E[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(397,41) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.944
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 1.120 
      remark #15478: estimated potential speedup: 6.970 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(395,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference temp[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(397,3) ]
      remark #15389: vectorization support: reference xy[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(397,23) ]
      remark #15389: vectorization support: reference E[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(397,41) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.429
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(395,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(228,2) inlined into cuda_dpposeEstimation.cpp(404,2)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between temp2[i*row1+j] (232:3) and temp2[i*row1+j] (232:3)
   remark #17106: parallel dependence: assumed OUTPUT dependence between temp2[i*row1+j] (232:3) and temp2[i*row1+j] (232:3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(404,2)
   <Distributed chunk1>
      remark #25087: Preprocess Loopnests: Sinking 1 Stmts Into Inner LOOP to Create Perfect Nest 
      remark #25426: Loop Distributed (2 way) 
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between temp2[i*row1+j] (232:3) and temp2[i*row1+j] (232:3)
      remark #17106: parallel dependence: assumed OUTPUT dependence between temp2[i*row1+j] (232:3) and temp2[i*row1+j] (232:3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(404,2)
      <Distributed chunk1>
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.620 
         remark #15478: estimated potential speedup: 5.330 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(404,2)
      <Remainder loop for vectorization, Distributed chunk1>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(228,2) inlined into cuda_dpposeEstimation.cpp(404,2)
<Distributed chunk2>
   remark #25444: Loopnest Interchanged: ( 1 2 3 ) --> ( 1 3 2 )
   remark #25229: Loop multiversioned for Trip-count
   remark #25459: Loopnest replaced by matmul intrinsic
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(228,2) inlined into cuda_dpposeEstimation.cpp(404,2)
<Distributed chunk2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #25440: unrolled and jammed by 4   (pre-vector) 
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(404,2)
   <Distributed chunk2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between temp2[i*row1+j] (235:4) and temp2[i*row1+j] (235:4)
      remark #17106: parallel dependence: assumed OUTPUT dependence between temp2[i*row1+j] (235:4) and temp2[i*row1+j] (235:4)
      remark #25440: unrolled and jammed by 4   (pre-vector) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(404,2)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(404,2)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.580
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 8 
         remark #15451: unmasked unaligned unit stride stores: 16 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 168 
         remark #15477: vector cost: 17.870 
         remark #15478: estimated potential speedup: 6.950 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(404,2)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(404,2)
   <Remainder, Distributed chunk2>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(404,2)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(404,2)
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.950
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 5 
         remark #15451: unmasked unaligned unit stride stores: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 42 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 6.350 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(404,2)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(228,2) inlined into cuda_dpposeEstimation.cpp(404,2)
<Remainder, Distributed chunk2>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(404,2)
   <Distributed chunk2>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(404,2)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(404,2)
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.750
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 11 
         remark #15477: vector cost: 1.000 
         remark #15478: estimated potential speedup: 7.600 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(404,2)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(247,2) inlined into cuda_dpposeEstimation.cpp(408,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(249,3) inlined into cuda_dpposeEstimation.cpp(408,2)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(249,3) inlined into cuda_dpposeEstimation.cpp(408,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference temp3[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(251,3) ]
      remark #15389: vectorization support: reference M[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(251,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.167
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 6.680 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(249,3) inlined into cuda_dpposeEstimation.cpp(408,2)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference temp3[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(251,3) ]
      remark #15389: vectorization support: reference M[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(251,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.700
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(249,3) inlined into cuda_dpposeEstimation.cpp(408,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(258,2) inlined into cuda_dpposeEstimation.cpp(412,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(260,3) inlined into cuda_dpposeEstimation.cpp(412,2)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(260,3) inlined into cuda_dpposeEstimation.cpp(412,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference Znum[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,3) ]
      remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,23) ]
      remark #15389: vectorization support: reference temp3[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,44) ]
      remark #15389: vectorization support: reference Y[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.950
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 6.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(260,3) inlined into cuda_dpposeEstimation.cpp(412,2)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference Znum[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,3) ]
      remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,23) ]
      remark #15389: vectorization support: reference temp3[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,44) ]
      remark #15389: vectorization support: reference Y[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.375
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(260,3) inlined into cuda_dpposeEstimation.cpp(412,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(269,2) inlined into cuda_dpposeEstimation.cpp(416,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(271,3) inlined into cuda_dpposeEstimation.cpp(416,2)
   <Peeled loop for vectorization, Predicate Optimized v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(271,3) inlined into cuda_dpposeEstimation.cpp(416,2)
   <Predicate Optimized v1>
      remark #25423: Condition at line 273 hoisted out of this loop
      remark #15389: vectorization support: reference A[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(279,4) ]
      remark #15389: vectorization support: reference BBt[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(279,24) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 0.500 
      remark #15478: estimated potential speedup: 8.710 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(271,3) inlined into cuda_dpposeEstimation.cpp(416,2)
   <Remainder loop for vectorization, Predicate Optimized v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(271,3) inlined into cuda_dpposeEstimation.cpp(416,2)
   <Peeled loop for vectorization, Predicate Optimized v2>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(271,3) inlined into cuda_dpposeEstimation.cpp(416,2)
   <Predicate Optimized v2>
      remark #15389: vectorization support: reference A[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(279,4) ]
      remark #15389: vectorization support: reference BBt[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(279,24) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 0.500 
      remark #15478: estimated potential speedup: 8.710 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(271,3) inlined into cuda_dpposeEstimation.cpp(416,2)
   <Remainder loop for vectorization, Predicate Optimized v2>
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(228,2) inlined into cuda_dpposeEstimation.cpp(435,9)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between Z[i*row1+j] (232:3) and Z[i*row1+j] (232:3)
   remark #17106: parallel dependence: assumed OUTPUT dependence between Z[i*row1+j] (232:3) and Z[i*row1+j] (232:3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(435,9)
   <Distributed chunk1>
      remark #25087: Preprocess Loopnests: Sinking 1 Stmts Into Inner LOOP to Create Perfect Nest 
      remark #25426: Loop Distributed (2 way) 
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between Z[i*row1+j] (232:3) and Z[i*row1+j] (232:3)
      remark #17106: parallel dependence: assumed OUTPUT dependence between Z[i*row1+j] (232:3) and Z[i*row1+j] (232:3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(435,9)
      <Distributed chunk1>
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.620 
         remark #15478: estimated potential speedup: 5.330 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(435,9)
      <Remainder loop for vectorization, Distributed chunk1>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(228,2) inlined into cuda_dpposeEstimation.cpp(435,9)
<Distributed chunk2>
   remark #25444: Loopnest Interchanged: ( 1 2 3 ) --> ( 1 3 2 )
   remark #25229: Loop multiversioned for Trip-count
   remark #25459: Loopnest replaced by matmul intrinsic
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(228,2) inlined into cuda_dpposeEstimation.cpp(435,9)
<Distributed chunk2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #25440: unrolled and jammed by 4   (pre-vector) 
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(435,9)
   <Distributed chunk2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between Z[i*row1+j] (235:4) and Z[i*row1+j] (235:4)
      remark #17106: parallel dependence: assumed OUTPUT dependence between Z[i*row1+j] (235:4) and Z[i*row1+j] (235:4)
      remark #25440: unrolled and jammed by 4   (pre-vector) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(435,9)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(435,9)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.580
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 8 
         remark #15451: unmasked unaligned unit stride stores: 16 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 168 
         remark #15477: vector cost: 17.870 
         remark #15478: estimated potential speedup: 6.950 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(435,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(435,9)
   <Remainder, Distributed chunk2>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(435,9)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(435,9)
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.950
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 5 
         remark #15451: unmasked unaligned unit stride stores: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 42 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 6.350 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(435,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(228,2) inlined into cuda_dpposeEstimation.cpp(435,9)
<Remainder, Distributed chunk2>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(435,9)
   <Distributed chunk2>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(435,9)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(435,9)
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference A[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.750
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 11 
         remark #15477: vector cost: 1.000 
         remark #15478: estimated potential speedup: 7.600 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(435,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(232,3):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(232,3):remark #34026: call to memset implemented as a call to optimized library version
cuda_dpposeEstimation.cpp(232,3):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(232,3):remark #34026: call to memset implemented as a call to optimized library version
cuda_dpposeEstimation.cpp(381,1):remark #34051: REGISTER ALLOCATION : [_Z10calculateZPfS_S_S_S_S_fS_S_iii] cuda_dpposeEstimation.cpp:381

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   29[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    1206
            Global    :     435
            Local     :     771
        Regenerable   :      45
        Spilled       :     127
        
    Routine stack
        Variables     :     584 bytes*
            Reads     :       1 [0.00e+00 ~ 0.0%]
            Writes    :      73 [3.24e+01 ~ 0.1%]
        Spills        :    1128 bytes*
            Reads     :     322 [3.68e+03 ~ 6.9%]
            Writes    :     156 [8.72e+02 ~ 1.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: mean_of_std_deviation(float *, int, int, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (mean_of_std_deviation(float *, int, int, float *)) [8/83=9.6%] cuda_dpposeEstimation.cpp(123,1)
  -> EXTERN: (131,11) pow(double, double)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(126,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(129,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(129,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference variable[j*15+i] has unaligned access   [ cuda_dpposeEstimation.cpp(131,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.462
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ cuda_dpposeEstimation.cpp(131,11) ]
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ cuda_dpposeEstimation.cpp(125,2) ]
      remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ cuda_dpposeEstimation.cpp(125,2) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 15 
      remark #15477: vector cost: 3.250 
      remark #15478: estimated potential speedup: 3.890 
      remark #15487: type converts: 3 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(129,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(123,1):remark #34051: REGISTER ALLOCATION : [_Z21mean_of_std_deviationPfiiS_] cuda_dpposeEstimation.cpp:123

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   28[ rax rdx rcx rbx rsi rdi r8-r13 r15 zmm0-zmm14]
        
    Routine temporaries
        Total         :      85
            Global    :      31
            Local     :      54
        Regenerable   :       4
        Spilled       :       4
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [2.00e+00 ~ 0.4%]
            Writes    :       1 [1.80e+00 ~ 0.3%]
        Spills        :      32 bytes*
            Reads     :       4 [3.60e+00 ~ 0.7%]
            Writes    :       4 [3.60e+00 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::operator&..0(std::_Ios_Iostate, std::_Ios_Iostate)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (std::operator&..0(std::_Ios_Iostate, std::_Ios_Iostate)) [11/83=13.3%] /usr/include/c++/5/bits/ios_base.h(166,3)
  CLONED FROM: std::operator&(std::_Ios_Iostate, std::_Ios_Iostate)(X,2)


    Report from: Code generation optimizations [cg]

/usr/include/c++/5/bits/ios_base.h(166,3):remark #34051: REGISTER ALLOCATION : [_ZStanSt12_Ios_IostateS_..0] /usr/include/c++/5/bits/ios_base.h:166

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       0
            Local     :      11
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: readValues(char *, float *, int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (readValues(char *, float *, int, int, int)) [13/83=15.7%] cuda_dpposeEstimation.cpp(30,1)
  -> INLINE (MANUAL): (33,11) std::basic_ifstream<char, std::char_traits<char>>::~basic_ifstream(std::basic_ifstream<char, std::char_traits<char>> *const) (isz = 1) (sz = 6)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(533,7) std::basic_ifstream<char, std::char_traits<char>>::~basic_ifstream(std::basic_ifstream<char, std::char_traits<char>> *, const long *const *) (isz = 35) (sz = 42)
      -> INLINE (MANUAL): (534,9) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
        -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
          -> EXTERN: (282,20) __cxa_call_unexpected
          -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (534,9) std::basic_istream<char, std::char_traits<char>>::~basic_istream(std::basic_istream<char, std::char_traits<char>> *, const long *const *) (isz = 28) (sz = 35)
        -> INLINE (MANUAL): /usr/include/c++/5/istream:(104,36) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (534,9) std::basic_filebuf<char, std::char_traits<char>>::~basic_filebuf(std::basic_filebuf<char, std::char_traits<char>> *) (isz = 33) (sz = 38)
        -> EXTERN: (239,7) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *) (isz = 8) (sz = 13)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
        -> EXTERN: (239,7) __cxa_call_unexpected
        -> EXTERN: (239,15) std::basic_filebuf<char, std::char_traits<char>>::close(std::basic_filebuf<char, std::char_traits<char>> *)
        -> EXTERN: (239,24) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,24) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *) (isz = 8) (sz = 13)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
  -> INLINE (MANUAL): (33,11) std::basic_ifstream<char, std::char_traits<char>>::basic_ifstream(std::basic_ifstream<char, std::char_traits<char>> *const) (isz = 1) (sz = 6)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(481,7) std::basic_ifstream<char, std::char_traits<char>>::basic_ifstream(std::basic_ifstream<char, std::char_traits<char>> *, const long *const *) (isz = 72) (sz = 79)
      -> INLINE (MANUAL): (481,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
        -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
          -> EXTERN: (282,20) __cxa_call_unexpected
          -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (481,7) std::basic_filebuf<char, std::char_traits<char>>::~basic_filebuf(std::basic_filebuf<char, std::char_traits<char>> *) (isz = 33) (sz = 38)
        -> EXTERN: (239,7) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *) (isz = 8) (sz = 13)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
        -> EXTERN: (239,7) __cxa_call_unexpected
        -> EXTERN: (239,15) std::basic_filebuf<char, std::char_traits<char>>::close(std::basic_filebuf<char, std::char_traits<char>> *)
        -> EXTERN: (239,24) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,24) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *) (isz = 8) (sz = 13)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
      -> INLINE (MANUAL): (481,7) std::basic_istream<char, std::char_traits<char>>::~basic_istream(std::basic_istream<char, std::char_traits<char>> *, const long *const *) (isz = 28) (sz = 35)
        -> INLINE (MANUAL): /usr/include/c++/5/istream:(104,36) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> EXTERN: (481,7) std::basic_filebuf<char, std::char_traits<char>>::basic_filebuf(std::basic_filebuf<char, std::char_traits<char>> *)
      -> INLINE (MANUAL): (481,7) std::basic_istream<char, std::char_traits<char>>::basic_istream(std::basic_istream<char, std::char_traits<char>> *, const long *const *) (isz = 46) (sz = 53)
        -> INLINE (MANUAL): /usr/include/c++/5/istream:(606,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(460,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 18) (sz = 23)
            -> EXTERN: (460,7) std::ios_base::ios_base(std::ios_base *const)
        -> INLINE (MANUAL): /usr/include/c++/5/istream:(606,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
        -> EXTERN: /usr/include/c++/5/istream:(608,15) std::basic_ios<char, std::char_traits<char>>::init(std::basic_ios<char, std::char_traits<char>> *, std::basic_streambuf<char, std::char_traits<char>> *)
      -> INLINE (MANUAL): (481,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
        -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(460,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 18) (sz = 23)
          -> EXTERN: (460,7) std::ios_base::ios_base(std::ios_base *const)
      -> EXTERN: (482,15) std::basic_ios<char, std::char_traits<char>>::init(std::basic_ios<char, std::char_traits<char>> *, std::basic_streambuf<char, std::char_traits<char>> *)
  -> INLINE (MANUAL): (34,13) std::basic_ifstream<char, std::char_traits<char>>::open(std::basic_ifstream<char, std::char_traits<char>> *, const char *, std::ios_base::openmode) (isz = 23) (sz = 32)
    -> EXTERN: /usr/include/c++/5/fstream:(597,18) std::basic_filebuf<char, std::char_traits<char>>::open(std::basic_filebuf<char, std::char_traits<char>> *, const char *, std::ios_base::openmode)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(597,35) std::operator|(std::_Ios_Openmode, std::_Ios_Openmode) (isz = 0) (sz = 7)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(598,10) std::basic_ios<char, std::char_traits<char>>::setstate(std::basic_ios<char, std::char_traits<char>> *, std::ios_base::iostate) (isz = 7) (sz = 14)
      -> EXTERN: /usr/include/c++/5/bits/basic_ios.h:(158,15) std::basic_ios<char, std::char_traits<char>>::clear(std::basic_ios<char, std::char_traits<char>> *, std::ios_base::iostate)
      -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(158,27) std::basic_ios<char, std::char_traits<char>>::rdstate(const std::basic_ios<char, std::char_traits<char>> *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(158,37) std::operator|(std::_Ios_Iostate, std::_Ios_Iostate) (isz = 0) (sz = 7)
    -> EXTERN: /usr/include/c++/5/fstream:(602,10) std::basic_ios<char, std::char_traits<char>>::clear(std::basic_ios<char, std::char_traits<char>> *, std::ios_base::iostate)
  -> INLINE (MANUAL): (35,17) std::basic_ifstream<char, std::char_traits<char>>::is_open(std::basic_ifstream<char, std::char_traits<char>> *) (isz = 3) (sz = 10)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(575,27) std::basic_filebuf<char, std::char_traits<char>>::is_open(const std::basic_filebuf<char, std::char_traits<char>> *) const (isz = 4) (sz = 11)
      -> EXTERN: (253,24) std::__basic_file<char>::is_open(const std::__basic_file<char> *) const
  -> (37,22) std::basic_ios<char, std::char_traits<char>>::eof(const std::basic_ios<char, std::char_traits<char>> *) const (isz = 7) (sz = 14)
     [[ Called routine is noinline  <1>]]
  -> (37,22) std::basic_ios<char, std::char_traits<char>>::eof(const std::basic_ios<char, std::char_traits<char>> *) const (isz = 7) (sz = 14)
     [[ Called routine is noinline  <1>]]
  -> (41,16) std::basic_istream<char, std::char_traits<char>>::operator>>(std::basic_istream<char, std::char_traits<char>> *, float &) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> INLINE (MANUAL): (52,15) std::basic_ifstream<char, std::char_traits<char>>::close(std::basic_ifstream<char, std::char_traits<char>> *) (isz = 12) (sz = 17)
    -> EXTERN: /usr/include/c++/5/fstream:(635,18) std::basic_filebuf<char, std::char_traits<char>>::close(std::basic_filebuf<char, std::char_traits<char>> *)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(636,10) std::basic_ios<char, std::char_traits<char>>::setstate(std::basic_ios<char, std::char_traits<char>> *, std::ios_base::iostate) (isz = 7) (sz = 14)
      -> EXTERN: /usr/include/c++/5/bits/basic_ios.h:(158,15) std::basic_ios<char, std::char_traits<char>>::clear(std::basic_ios<char, std::char_traits<char>> *, std::ios_base::iostate)
      -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(158,27) std::basic_ios<char, std::char_traits<char>>::rdstate(const std::basic_ios<char, std::char_traits<char>> *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(158,37) std::operator|(std::_Ios_Iostate, std::_Ios_Iostate) (isz = 0) (sz = 7)
  -> INLINE (MANUAL): (53,2) std::basic_ifstream<char, std::char_traits<char>>::~basic_ifstream(std::basic_ifstream<char, std::char_traits<char>> *const) (isz = 1) (sz = 6)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(533,7) std::basic_ifstream<char, std::char_traits<char>>::~basic_ifstream(std::basic_ifstream<char, std::char_traits<char>> *, const long *const *) (isz = 35) (sz = 42)
      -> INLINE (MANUAL): (534,9) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
        -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
          -> EXTERN: (282,20) __cxa_call_unexpected
          -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (534,9) std::basic_istream<char, std::char_traits<char>>::~basic_istream(std::basic_istream<char, std::char_traits<char>> *, const long *const *) (isz = 28) (sz = 35)
        -> INLINE (MANUAL): /usr/include/c++/5/istream:(104,36) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (534,9) std::basic_filebuf<char, std::char_traits<char>>::~basic_filebuf(std::basic_filebuf<char, std::char_traits<char>> *) (isz = 33) (sz = 38)
        -> EXTERN: (239,7) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *) (isz = 8) (sz = 13)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
        -> EXTERN: (239,7) __cxa_call_unexpected
        -> EXTERN: (239,15) std::basic_filebuf<char, std::char_traits<char>>::close(std::basic_filebuf<char, std::char_traits<char>> *)
        -> EXTERN: (239,24) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,24) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *) (isz = 8) (sz = 13)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(37,3)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(30,1):remark #34051: REGISTER ALLOCATION : [_Z10readValuesPcPfiii] cuda_dpposeEstimation.cpp:30

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :     211
            Global    :      27
            Local     :     184
        Regenerable   :      68
        Spilled       :       8
        
    Routine stack
        Variables     :     548 bytes*
            Reads     :      22 [5.63e+00 ~ 5.2%]
            Writes    :      49 [2.04e+01 ~ 18.9%]
        Spills        :      16 bytes*
            Reads     :       2 [1.45e+00 ~ 1.3%]
            Writes    :       2 [4.40e-01 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: febNorm_diff(float *, float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (febNorm_diff(float *, float *, int, int)) [14/83=16.9%] cuda_dpposeEstimation.cpp(665,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(668,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(670,17)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(670,17)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference a[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,26) ]
      remark #15389: vectorization support: reference b[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,41) ]
      remark #15389: vectorization support: reference a[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,58) ]
      remark #15389: vectorization support: reference b[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,73) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.542
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 14 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 6.850 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(670,17)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference a[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,26) ]
      remark #15389: vectorization support: reference b[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,41) ]
      remark #15389: vectorization support: reference a[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,58) ]
      remark #15389: vectorization support: reference b[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,73) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 3.154
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(670,17)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(665,1):remark #34051: REGISTER ALLOCATION : [_Z12febNorm_diffPfS_ii] cuda_dpposeEstimation.cpp:665

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :      88
            Global    :      34
            Local     :      54
        Regenerable   :       3
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [4.50e+00 ~ 0.4%]
            Writes    :       5 [4.50e+00 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [15/83=18.1%] cuda_dpposeEstimation.cpp(724,1)
  -> EXTERN: (726,36) ?1memset
  -> EXTERN: (726,49) ?1memset
  -> EXTERN: (737,12) operator new[](std::size_t)
  -> EXTERN: (738,14) operator new[](std::size_t)
  -> EXTERN: (739,11) operator new[](std::size_t)
  -> EXTERN: (740,21) operator new[](std::size_t)
  -> EXTERN: (741,16) operator new[](std::size_t)
  -> EXTERN: (742,13) operator new[](std::size_t)
  -> EXTERN: (752,11) operator new[](std::size_t)
  -> EXTERN: (753,11) operator new[](std::size_t)
  -> EXTERN: (754,11) operator new[](std::size_t)
  -> EXTERN: (755,11) operator new[](std::size_t)
  -> EXTERN: (758,11) operator new[](std::size_t)
  -> EXTERN: (759,11) operator new[](std::size_t)
  -> EXTERN: (760,12) operator new[](std::size_t)
  -> EXTERN: (761,11) operator new[](std::size_t)
  -> EXTERN: (767,10) std::chrono::_V2::system_clock::now()
  -> (769,10) readValues(char *, float *, int, int, int) (isz = 71) (sz = 86)
     [[ Inlining inhibited by overrideable criterion  <2>]]
  -> INLINE: (770,2) rowMean(float *, int, int, float *) (isz = 35) (sz = 46)
  -> INLINE: (771,9) Scalc(float *, int, int, float *) (isz = 36) (sz = 47)
  -> INLINE: (772,9) rowMean(float *, int, int, float *) (isz = 35) (sz = 46)
  -> (773,6) mean_of_std_deviation(float *, int, int, float *) (isz = 56) (sz = 69)
     [[ Inlining inhibited by overrideable criterion  <2>]]
  -> INLINE: (774,2) newScalc(float *, int, int, float) (isz = 33) (sz = 44)
  -> (776,12) readValues(char *, float *, int, int, int) (isz = 71) (sz = 86)
     [[ Inlining inhibited by overrideable criterion  <2>]]
  -> INLINE: (777,2) rowMean(float *, int, int, float *) (isz = 35) (sz = 46)
  -> INLINE: (778,2) Scalc(float *, int, int, float *) (isz = 36) (sz = 47)
  -> INLINE: (780,2) initializeZero(float *, int, int) (isz = 28) (sz = 37)
  -> INLINE: (781,2) initializeZero(float *, int, int) (isz = 28) (sz = 37)
  -> INLINE: (782,2) initializeZero(float *, int, int) (isz = 28) (sz = 37)
  -> INLINE: (783,2) rowMean(float *, int, int, float *) (isz = 35) (sz = 46)
  -> INLINE: (785,2) initializeZero(float *, int, int) (isz = 28) (sz = 37)
  -> INLINE: (786,2) initializeZero(float *, int, int) (isz = 28) (sz = 37)
  -> INLINE: (790,7) meanCalc(float *, int, int) (isz = 43) (sz = 54)
  -> INLINE: (793,2) TransposeOnCPU(float *, float *, int, int) (isz = 32) (sz = 43)
  -> INLINE: (794,2) cpuTransMatrixMult(float *, float *, float *, int, int) (isz = 53) (sz = 66)
  -> INLINE: (805,3) initialize(float *, float *, int, int) (isz = 32) (sz = 43)
  -> (807,3) calculateZ(float *, float *, float *, float *, float *, float *, float, float *, float *, int, int, int) (isz = 481) (sz = 508)
     [[ Inlining would exceed -inline-max-size value (508>253) <3>]]
  -> INLINE: (809,3) calculateQ(float *, float *, float *, float, int, int) (isz = 95) (sz = 110)
    -> EXTERN: (504,31) __cxa_throw_bad_array_new_length()
    -> EXTERN: (504,31) operator new[](std::size_t)
    -> INLINE: (506,2) scalarToMatrixMultiply(float *, float *, float, int, int) (isz = 32) (sz = 45)
    -> INLINE: (507,2) differenceOfMatrix(float *, float *, float *, int, int) (isz = 37) (sz = 50)
    -> EXTERN: (509,2) operator delete[](void *)
  -> (814,3) prox_2norm(float *, float *, float *, float, int, int, int) (isz = 502) (sz = 519)
     [[ Inlining would exceed -inline-max-size value (519>253) <3>]]
  -> INLINE: (817,3) updateDualvariable(float *, float, float *, float *, int, int) (isz = 43) (sz = 58)
  -> INLINE: (818,3) resCalc(float *, float *, float *, float *, float *, float, int, int) (isz = 214) (sz = 233)
    -> (713,13) febNorm_diff(float *, float *, int, int) (isz = 54) (sz = 67)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> INLINE: (713,40) febNorm(float *, int, int) (isz = 43) (sz = 54)
    -> (714,18) febNorm_diff(float *, float *, int, int) (isz = 54) (sz = 67)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> INLINE: (714,46) febNorm(float *, int, int) (isz = 43) (sz = 54)
  -> (823,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> EXTERN: (823,19) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
  -> (823,29) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (823,45) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (823,55) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (823,71) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (823,80) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (823,91) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (823,97) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]
  -> EXTERN: (849,10) std::chrono::_V2::system_clock::now()
  -> EXTERN: (855,2) operator delete[](void *)
  -> EXTERN: (856,9) operator delete[](void *)
  -> EXTERN: (857,2) operator delete[](void *)
  -> EXTERN: (858,2) operator delete[](void *)
  -> EXTERN: (859,2) operator delete[](void *)
  -> EXTERN: (860,2) operator delete[](void *)
  -> EXTERN: (861,2) operator delete[](void *)
  -> EXTERN: (862,2) operator delete[](void *)
  -> EXTERN: (863,2) operator delete[](void *)
  -> EXTERN: (864,2) operator delete[](void *)
  -> EXTERN: (865,2) operator delete[](void *)
  -> EXTERN: (866,2) operator delete[](void *)
  -> EXTERN: (867,2) operator delete[](void *)
  -> EXTERN: (868,2) operator delete[](void *)
  -> INLINE (MANUAL): (874,13) std::chrono::duration<float, std::ratio<1L, 1L>>::operator+=(std::chrono::duration<float, std::ratio<1L, 1L>> *, const std::chrono::duration<float, std::ratio<1L, 1L>> &) (isz = 4) (sz = 13)
    -> INLINE (MANUAL): /usr/include/c++/5/chrono:(315,15) std::chrono::duration<float, std::ratio<1L, 1L>>::count(const std::chrono::duration<float, std::ratio<1L, 1L>> *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (874,55) std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration, std::chrono::_V2::system_clock::duration>(const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> &, const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> &) (isz = 32) (sz = 41)
    -> INLINE (MANUAL): /usr/include/c++/5/chrono:(652,16) std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration>::time_since_epoch(const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> *) const (isz = 2) (sz = 8)
    -> INLINE (MANUAL): /usr/include/c++/5/chrono:(652,43) std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration>::time_since_epoch(const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> *) const (isz = 2) (sz = 8)
    -> INLINE (MANUAL): /usr/include/c++/5/chrono:(652,43) std::chrono::operator-<int64_t, std::nano, int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &, const std::chrono::duration<int64_t, std::nano> &) (isz = 19) (sz = 28)
      -> INLINE (MANUAL): (399,14) std::chrono::duration<int64_t, std::nano>::duration<std::chrono::duration<int64_t, std::nano>::rep, void>(std::chrono::duration<int64_t, std::nano> *, const std::chrono::duration<int64_t, std::nano>::rep &) (isz = 0) (sz = 7)
      -> INLINE (MANUAL): (399,26) std::chrono::duration<int64_t, std::nano>::count(const std::chrono::duration<int64_t, std::nano> *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (399,48) std::chrono::duration<int64_t, std::nano>::count(const std::chrono::duration<int64_t, std::nano> *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (874,55) std::chrono::duration_cast<std::chrono::duration<float, std::ratio<1L, 1L>>, int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &) (isz = 10) (sz = 17)
    -> INLINE (MANUAL): /usr/include/c++/5/chrono:(203,22) std::chrono::__duration_cast_impl<std::chrono::duration<float, std::ratio<1L, 1L>>, std::ratio_divide<std::nano, std::chrono::duration<int64_t, std::ratio<1L, 1L>>::period>, std::__success_type<float>::type, true, false>::__cast<int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &) (isz = 9) (sz = 16)
      -> INLINE (MANUAL): (162,20) std::chrono::duration<float, std::ratio<1L, 1L>>::duration<std::chrono::duration<float, std::ratio<1L, 1L>>::rep, void>(std::chrono::duration<float, std::ratio<1L, 1L>> *, const std::chrono::duration<float, std::ratio<1L, 1L>>::rep &) (isz = 0) (sz = 7)
      -> INLINE (MANUAL): (163,29) std::chrono::duration<int64_t, std::nano>::count(const std::chrono::duration<int64_t, std::nano> *) const (isz = 0) (sz = 6)
  -> (876,7) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (876,33) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> INLINE (MANUAL): (876,47) std::chrono::duration<float, std::ratio<1L, 1L>>::count(const std::chrono::duration<float, std::ratio<1L, 1L>> *) const (isz = 0) (sz = 6)
  -> (876,72) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (876,80) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(99,2) inlined into cuda_dpposeEstimation.cpp(770,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(102,3) inlined into cuda_dpposeEstimation.cpp(770,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference xy[j*15+i] has unaligned access   [ cuda_dpposeEstimation.cpp(104,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 3
      remark #15309: vectorization support: normalized vectorization overhead 1.048
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 1.750 
      remark #15478: estimated potential speedup: 1.290 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(102,3) inlined into cuda_dpposeEstimation.cpp(770,2)
   <Remainder loop for vectorization>
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(113,2) inlined into cuda_dpposeEstimation.cpp(771,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(115,3) inlined into cuda_dpposeEstimation.cpp(771,9)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(115,3) inlined into cuda_dpposeEstimation.cpp(771,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference xy[j*15+i] has aligned access   [ cuda_dpposeEstimation.cpp(117,4) ]
      remark #15388: vectorization support: reference xy[j*15+i] has aligned access   [ cuda_dpposeEstimation.cpp(117,30) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 2.200
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 2.400 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(115,3) inlined into cuda_dpposeEstimation.cpp(771,9)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=15
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(99,2) inlined into cuda_dpposeEstimation.cpp(772,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(102,3) inlined into cuda_dpposeEstimation.cpp(772,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference xy[j*15+i] has unaligned access   [ cuda_dpposeEstimation.cpp(104,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 3
      remark #15309: vectorization support: normalized vectorization overhead 1.048
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 1.750 
      remark #15478: estimated potential speedup: 1.290 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(102,3) inlined into cuda_dpposeEstimation.cpp(772,9)
   <Remainder loop for vectorization>
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(143,2) inlined into cuda_dpposeEstimation.cpp(774,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(145,3) inlined into cuda_dpposeEstimation.cpp(774,2)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(145,3) inlined into cuda_dpposeEstimation.cpp(774,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference xy[i*15+j] has aligned access   [ cuda_dpposeEstimation.cpp(147,3) ]
      remark #15388: vectorization support: reference xy[i*15+j] has aligned access   [ cuda_dpposeEstimation.cpp(147,29) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.314
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 31 
      remark #15477: vector cost: 8.750 
      remark #15478: estimated potential speedup: 2.220 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(145,3) inlined into cuda_dpposeEstimation.cpp(774,2)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=15
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(99,2) inlined into cuda_dpposeEstimation.cpp(777,2)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ i sum B mean j } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15389: vectorization support: reference mean[j] has unaligned access   [ cuda_dpposeEstimation.cpp(106,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.088
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 15 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 108 
   remark #15477: vector cost: 48.120 
   remark #15478: estimated potential speedup: 2.240 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=48

   LOOP BEGIN at cuda_dpposeEstimation.cpp(102,3) inlined into cuda_dpposeEstimation.cpp(777,2)
      remark #25436: completely unrolled by 15   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(113,2) inlined into cuda_dpposeEstimation.cpp(778,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=384

   LOOP BEGIN at cuda_dpposeEstimation.cpp(115,3) inlined into cuda_dpposeEstimation.cpp(778,2)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(115,3) inlined into cuda_dpposeEstimation.cpp(778,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference B[j*15+i] has aligned access   [ cuda_dpposeEstimation.cpp(117,4) ]
      remark #15388: vectorization support: reference B[j*15+i] has aligned access   [ cuda_dpposeEstimation.cpp(117,30) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 2.200
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 2.400 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(115,3) inlined into cuda_dpposeEstimation.cpp(778,2)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=15
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(154,2) inlined into cuda_dpposeEstimation.cpp(780,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15306: loop was not vectorized: inner loop was transformed to memset or memcpy   [ cuda_dpposeEstimation.cpp(156,3) ]
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(156,3) inlined into cuda_dpposeEstimation.cpp(780,2)
      remark #25408: memset generated
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
      remark #25015: Estimate of max trip count of loop=1
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(156,3) inlined into cuda_dpposeEstimation.cpp(781,2)
   remark #25408: memset generated
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(154,2) inlined into cuda_dpposeEstimation.cpp(782,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(156,3) inlined into cuda_dpposeEstimation.cpp(782,2)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(156,3) inlined into cuda_dpposeEstimation.cpp(782,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference variable[i*15+j] has aligned access   [ cuda_dpposeEstimation.cpp(158,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.930 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(156,3) inlined into cuda_dpposeEstimation.cpp(782,2)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=15
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(99,2) inlined into cuda_dpposeEstimation.cpp(783,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(102,3) inlined into cuda_dpposeEstimation.cpp(783,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference xy[j*15+i] has unaligned access   [ cuda_dpposeEstimation.cpp(104,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 3
      remark #15309: vectorization support: normalized vectorization overhead 1.048
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 1.750 
      remark #15478: estimated potential speedup: 1.290 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(102,3) inlined into cuda_dpposeEstimation.cpp(783,2)
   <Remainder loop for vectorization>
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(154,2) inlined into cuda_dpposeEstimation.cpp(785,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15306: loop was not vectorized: inner loop was transformed to memset or memcpy   [ cuda_dpposeEstimation.cpp(156,3) ]
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(156,3) inlined into cuda_dpposeEstimation.cpp(785,2)
      remark #25408: memset generated
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
      remark #25015: Estimate of max trip count of loop=1
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(154,2) inlined into cuda_dpposeEstimation.cpp(786,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15306: loop was not vectorized: inner loop was transformed to memset or memcpy   [ cuda_dpposeEstimation.cpp(156,3) ]
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(156,3) inlined into cuda_dpposeEstimation.cpp(786,2)
      remark #25408: memset generated
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
      remark #25015: Estimate of max trip count of loop=1
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(168,2) inlined into cuda_dpposeEstimation.cpp(790,7)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(170,3) inlined into cuda_dpposeEstimation.cpp(790,7)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference xy[i*15+j] has unaligned access   [ cuda_dpposeEstimation.cpp(172,15) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 3
      remark #15309: vectorization support: normalized vectorization overhead 0.125
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 2.500 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(170,3) inlined into cuda_dpposeEstimation.cpp(790,7)
   <Remainder loop for vectorization>
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(188,3) inlined into cuda_dpposeEstimation.cpp(793,2)
   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized   [ cuda_dpposeEstimation.cpp(188,3) ]
   remark #25015: Estimate of max trip count of loop=15

   LOOP BEGIN at cuda_dpposeEstimation.cpp(186,2) inlined into cuda_dpposeEstimation.cpp(793,2)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(186,2) inlined into cuda_dpposeEstimation.cpp(793,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference matrixTranspose[j*384+i] has aligned access   [ cuda_dpposeEstimation.cpp(190,3) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <B[i*15+j]>, stride is 15   [ cuda_dpposeEstimation.cpp(190,32) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.950 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=96
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(186,2) inlined into cuda_dpposeEstimation.cpp(793,2)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=384
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(199,2) inlined into cuda_dpposeEstimation.cpp(794,2)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ j k fSum matrixTranspose B C i } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=384

   LOOP BEGIN at cuda_dpposeEstimation.cpp(201,3) inlined into cuda_dpposeEstimation.cpp(794,2)
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference C[i*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(208,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.734
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 15 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 127 
      remark #15477: vector cost: 16.000 
      remark #15478: estimated potential speedup: 7.810 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=48

      LOOP BEGIN at cuda_dpposeEstimation.cpp(204,4) inlined into cuda_dpposeEstimation.cpp(794,2)
         remark #25436: completely unrolled by 15   (pre-vector) 
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(802,15)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between variable[i*384+j] (217:3) and cout (823:9)
   remark #17106: parallel dependence: assumed FLOW dependence between cout (823:9) and variable[i*384+j] (217:3)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=238

   LOOP BEGIN at cuda_dpposeEstimation.cpp(215,2) inlined into cuda_dpposeEstimation.cpp(805,3)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between variable[i*384+j] (217:3) and variable[i*384+j] (219:3)
      remark #17106: parallel dependence: assumed FLOW dependence between variable[i*384+j] (219:3) and variable[i*384+j] (217:3)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=2

      LOOP BEGIN at cuda_dpposeEstimation.cpp(217,3) inlined into cuda_dpposeEstimation.cpp(805,3)
         remark #25401: memcopy(with guard) generated
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed ANTI dependence between variable[i*384+j] (217:3) and variable[i*384+j] (219:3)
         remark #17106: parallel dependence: assumed FLOW dependence between variable[i*384+j] (219:3) and variable[i*384+j] (217:3)
         remark #15542: loop was not vectorized: inner loop was already vectorized
         remark #25015: Estimate of max trip count of loop=1

         LOOP BEGIN at cuda_dpposeEstimation.cpp(217,3) inlined into cuda_dpposeEstimation.cpp(805,3)
         <Peeled loop for vectorization, Multiversioned v2>
            remark #25015: Estimate of max trip count of loop=7
         LOOP END

         LOOP BEGIN at cuda_dpposeEstimation.cpp(217,3) inlined into cuda_dpposeEstimation.cpp(805,3)
         <Multiversioned v2>
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15388: vectorization support: reference variable[i*384+j] has aligned access   [ cuda_dpposeEstimation.cpp(219,3) ]
            remark #15389: vectorization support: reference variable[i*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(219,29) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 8
            remark #15309: vectorization support: normalized vectorization overhead 3.250
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 5 
            remark #15477: vector cost: 0.500 
            remark #15478: estimated potential speedup: 7.960 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=48
         LOOP END

         LOOP BEGIN at cuda_dpposeEstimation.cpp(217,3) inlined into cuda_dpposeEstimation.cpp(805,3)
         <Remainder loop for vectorization, Multiversioned v2>
            remark #25015: Estimate of max trip count of loop=384
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(247,2) inlined into cuda_dpposeEstimation.cpp(809,3)
      remark #25045: Fused Loops: ( 247 493 )

      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=2

      LOOP BEGIN at cuda_dpposeEstimation.cpp(249,3) inlined into cuda_dpposeEstimation.cpp(809,3)
         remark #25045: Fused Loops: ( 249 495 )

         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference Temp[i*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(251,3) ]
         remark #15389: vectorization support: reference variable[i*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(251,28) ]
         remark #15389: vectorization support: reference diffMatrix[i*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(497,17) ]
         remark #15389: vectorization support: reference variable[i*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(497,43) ]
         remark #15389: vectorization support: reference Temp[i*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(497,66) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.471
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15451: unmasked unaligned unit stride stores: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 14 
         remark #15477: vector cost: 2.120 
         remark #15478: estimated potential speedup: 6.460 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
         remark #25015: Estimate of max trip count of loop=24
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(495,17) inlined into cuda_dpposeEstimation.cpp(809,3)
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(493,9) inlined into cuda_dpposeEstimation.cpp(809,3)
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(655,2) inlined into cuda_dpposeEstimation.cpp(817,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=2

      LOOP BEGIN at cuda_dpposeEstimation.cpp(657,3) inlined into cuda_dpposeEstimation.cpp(817,3)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference variable[i*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(659,4) ]
         remark #15389: vectorization support: reference variable[i*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(659,4) ]
         remark #15389: vectorization support: reference M[i*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(659,25) ]
         remark #15389: vectorization support: reference variable[i*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(659,41) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.464
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 13 
         remark #15477: vector cost: 1.750 
         remark #15478: estimated potential speedup: 7.280 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(683,9) inlined into cuda_dpposeEstimation.cpp(818,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=2

      LOOP BEGIN at cuda_dpposeEstimation.cpp(685,17) inlined into cuda_dpposeEstimation.cpp(818,3)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference variable[i*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(687,26) ]
         remark #15389: vectorization support: reference variable[i*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(687,43) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15399: vectorization support: unroll factor set to 8
         remark #15309: vectorization support: normalized vectorization overhead 0.047
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 1.000 
         remark #15478: estimated potential speedup: 7.930 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(683,9) inlined into cuda_dpposeEstimation.cpp(818,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=2

      LOOP BEGIN at cuda_dpposeEstimation.cpp(685,17) inlined into cuda_dpposeEstimation.cpp(818,3)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference variable[i*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(687,26) ]
         remark #15389: vectorization support: reference variable[i*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(687,43) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15399: vectorization support: unroll factor set to 8
         remark #15309: vectorization support: normalized vectorization overhead 0.047
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 1.000 
         remark #15478: estimated potential speedup: 7.930 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(99,2) inlined into cuda_dpposeEstimation.cpp(777,2)
   remark #15389: vectorization support: reference mean[j] has unaligned access   [ cuda_dpposeEstimation.cpp(106,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <B[j*15+i]>, stride is 15   [ cuda_dpposeEstimation.cpp(104,11) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.088
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 15 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 108 
   remark #15477: vector cost: 48.120 
   remark #15478: estimated potential speedup: 2.240 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=48
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(99,2) inlined into cuda_dpposeEstimation.cpp(777,2)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=384
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(199,2) inlined into cuda_dpposeEstimation.cpp(794,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=384

   LOOP BEGIN at cuda_dpposeEstimation.cpp(201,3) inlined into cuda_dpposeEstimation.cpp(794,2)
      remark #17107: loop was not parallelized: inner loop
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference matrixTranspose[k*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(206,30) ]
      remark #15389: vectorization support: reference C[i*384+j] has unaligned access   [ cuda_dpposeEstimation.cpp(208,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.734
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 15 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 127 
      remark #15477: vector cost: 16.000 
      remark #15478: estimated potential speedup: 7.810 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=48
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(104,11):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 60 }, types { F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x0000000FF }.
cuda_dpposeEstimation.cpp(104,11):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 60 }, types { F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x00000007F }.
cuda_dpposeEstimation.cpp(104,11):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 60 }, types { F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x0000000FF }.
cuda_dpposeEstimation.cpp(104,11):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 60 }, types { F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x00000007F }.
cuda_dpposeEstimation.cpp(726,36):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
cuda_dpposeEstimation.cpp(726,49):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
cuda_dpposeEstimation.cpp(767,10):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (32, 0)
cuda_dpposeEstimation.cpp(158,3):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(158,3):remark #34026: call to memset implemented as a call to optimized library version
cuda_dpposeEstimation.cpp(158,3):remark #34014: optimization advice for memset: increase the destination's alignment to 32 (and use __assume_aligned) to increase the width of stores
cuda_dpposeEstimation.cpp(158,3):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
cuda_dpposeEstimation.cpp(158,3):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(158,3):remark #34026: call to memset implemented as a call to optimized library version
cuda_dpposeEstimation.cpp(158,3):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(158,3):remark #34026: call to memset implemented as a call to optimized library version
cuda_dpposeEstimation.cpp(219,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(219,3):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(219,3):remark #34026: call to memcpy implemented as a call to optimized library version
cuda_dpposeEstimation.cpp(849,10):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (32, 0)
cuda_dpposeEstimation.cpp(724,1):remark #34051: REGISTER ALLOCATION : [main] cuda_dpposeEstimation.cpp:724

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    1040
            Global    :     284
            Local     :     756
        Regenerable   :     155
        Spilled       :      20
        
    Routine stack
        Variables     :     120 bytes*
            Reads     :       8 [1.92e+01 ~ 0.0%]
            Writes    :      26 [4.00e+00 ~ 0.0%]
        Spills        :     248 bytes*
            Reads     :      93 [2.74e+02 ~ 0.3%]
            Writes    :      43 [3.87e+01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dump_to_file(char *, float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dump_to_file(char *, float *, int, int)) [16/83=19.3%] cuda_dpposeEstimation.cpp(57,1)
  -> INLINE (MANUAL): (58,11) std::basic_ofstream<char, std::char_traits<char>>::~basic_ofstream(std::basic_ofstream<char, std::char_traits<char>> *const) (isz = 1) (sz = 6)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(737,7) std::basic_ofstream<char, std::char_traits<char>>::~basic_ofstream(std::basic_ofstream<char, std::char_traits<char>> *, const long *const *) (isz = 35) (sz = 42)
      -> INLINE (MANUAL): (738,9) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
        -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
          -> EXTERN: (282,20) __cxa_call_unexpected
          -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (738,9) std::basic_ostream<char, std::char_traits<char>>::~basic_ostream(std::basic_ostream<char, std::char_traits<char>> *, const long *const *) (isz = 26) (sz = 33)
        -> INLINE (MANUAL): /usr/include/c++/5/ostream:(93,26) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (738,9) std::basic_filebuf<char, std::char_traits<char>>::~basic_filebuf(std::basic_filebuf<char, std::char_traits<char>> *) (isz = 33) (sz = 38)
        -> EXTERN: (239,7) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *) (isz = 8) (sz = 13)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
        -> EXTERN: (239,7) __cxa_call_unexpected
        -> EXTERN: (239,15) std::basic_filebuf<char, std::char_traits<char>>::close(std::basic_filebuf<char, std::char_traits<char>> *)
        -> EXTERN: (239,24) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,24) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *) (isz = 8) (sz = 13)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
  -> INLINE (MANUAL): (58,11) std::basic_ofstream<char, std::char_traits<char>>::basic_ofstream(std::basic_ofstream<char, std::char_traits<char>> *const) (isz = 1) (sz = 6)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(682,7) std::basic_ofstream<char, std::char_traits<char>>::basic_ofstream(std::basic_ofstream<char, std::char_traits<char>> *, const long *const *) (isz = 72) (sz = 79)
      -> INLINE (MANUAL): (682,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
        -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
          -> EXTERN: (282,20) __cxa_call_unexpected
          -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (682,7) std::basic_filebuf<char, std::char_traits<char>>::~basic_filebuf(std::basic_filebuf<char, std::char_traits<char>> *) (isz = 33) (sz = 38)
        -> EXTERN: (239,7) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *) (isz = 8) (sz = 13)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
        -> EXTERN: (239,7) __cxa_call_unexpected
        -> EXTERN: (239,15) std::basic_filebuf<char, std::char_traits<char>>::close(std::basic_filebuf<char, std::char_traits<char>> *)
        -> EXTERN: (239,24) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,24) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *) (isz = 8) (sz = 13)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
      -> INLINE (MANUAL): (682,7) std::basic_ostream<char, std::char_traits<char>>::~basic_ostream(std::basic_ostream<char, std::char_traits<char>> *, const long *const *) (isz = 26) (sz = 33)
        -> INLINE (MANUAL): /usr/include/c++/5/ostream:(93,26) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> EXTERN: (682,7) std::basic_filebuf<char, std::char_traits<char>>::basic_filebuf(std::basic_filebuf<char, std::char_traits<char>> *)
      -> INLINE (MANUAL): (682,7) std::basic_ostream<char, std::char_traits<char>>::basic_ostream(std::basic_ostream<char, std::char_traits<char>> *, const long *const *) (isz = 44) (sz = 51)
        -> INLINE (MANUAL): /usr/include/c++/5/ostream:(384,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(460,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 18) (sz = 23)
            -> EXTERN: (460,7) std::ios_base::ios_base(std::ios_base *const)
        -> INLINE (MANUAL): /usr/include/c++/5/ostream:(384,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
        -> EXTERN: /usr/include/c++/5/ostream:(385,15) std::basic_ios<char, std::char_traits<char>>::init(std::basic_ios<char, std::char_traits<char>> *, std::basic_streambuf<char, std::char_traits<char>> *)
      -> INLINE (MANUAL): (682,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
        -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(460,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 18) (sz = 23)
          -> EXTERN: (460,7) std::ios_base::ios_base(std::ios_base *const)
      -> EXTERN: (683,15) std::basic_ios<char, std::char_traits<char>>::init(std::basic_ios<char, std::char_traits<char>> *, std::basic_streambuf<char, std::char_traits<char>> *)
  -> INLINE (MANUAL): (59,5) std::basic_ofstream<char, std::char_traits<char>>::open(std::basic_ofstream<char, std::char_traits<char>> *, const char *, std::ios_base::openmode) (isz = 23) (sz = 32)
    -> EXTERN: /usr/include/c++/5/fstream:(802,18) std::basic_filebuf<char, std::char_traits<char>>::open(std::basic_filebuf<char, std::char_traits<char>> *, const char *, std::ios_base::openmode)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(802,35) std::operator|(std::_Ios_Openmode, std::_Ios_Openmode) (isz = 0) (sz = 7)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(803,10) std::basic_ios<char, std::char_traits<char>>::setstate(std::basic_ios<char, std::char_traits<char>> *, std::ios_base::iostate) (isz = 7) (sz = 14)
      -> EXTERN: /usr/include/c++/5/bits/basic_ios.h:(158,15) std::basic_ios<char, std::char_traits<char>>::clear(std::basic_ios<char, std::char_traits<char>> *, std::ios_base::iostate)
      -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(158,27) std::basic_ios<char, std::char_traits<char>>::rdstate(const std::basic_ios<char, std::char_traits<char>> *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(158,37) std::operator|(std::_Ios_Iostate, std::_Ios_Iostate) (isz = 0) (sz = 7)
    -> EXTERN: /usr/include/c++/5/fstream:(807,10) std::basic_ios<char, std::char_traits<char>>::clear(std::basic_ios<char, std::char_traits<char>> *, std::ios_base::iostate)
  -> (66,6) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (66,25) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (69,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> INLINE (MANUAL): (70,2) std::basic_ofstream<char, std::char_traits<char>>::~basic_ofstream(std::basic_ofstream<char, std::char_traits<char>> *const) (isz = 1) (sz = 6)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(737,7) std::basic_ofstream<char, std::char_traits<char>>::~basic_ofstream(std::basic_ofstream<char, std::char_traits<char>> *, const long *const *) (isz = 35) (sz = 42)
      -> INLINE (MANUAL): (738,9) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
        -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
          -> EXTERN: (282,20) __cxa_call_unexpected
          -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (738,9) std::basic_ostream<char, std::char_traits<char>>::~basic_ostream(std::basic_ostream<char, std::char_traits<char>> *, const long *const *) (isz = 26) (sz = 33)
        -> INLINE (MANUAL): /usr/include/c++/5/ostream:(93,26) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *) (isz = 9) (sz = 14)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (738,9) std::basic_filebuf<char, std::char_traits<char>>::~basic_filebuf(std::basic_filebuf<char, std::char_traits<char>> *) (isz = 33) (sz = 38)
        -> EXTERN: (239,7) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *) (isz = 8) (sz = 13)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
        -> EXTERN: (239,7) __cxa_call_unexpected
        -> EXTERN: (239,15) std::basic_filebuf<char, std::char_traits<char>>::close(std::basic_filebuf<char, std::char_traits<char>> *)
        -> EXTERN: (239,24) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,24) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const) (isz = 0) (sz = 5)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *) (isz = 8) (sz = 13)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(62,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ cuda_dpposeEstimation.cpp(66,6) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at cuda_dpposeEstimation.cpp(60,2)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ cuda_dpposeEstimation.cpp(66,6) ]
   remark #17102: loop was not parallelized: not a parallelization candidate
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(57,1):remark #34051: REGISTER ALLOCATION : [_Z12dump_to_filePcPfii] cuda_dpposeEstimation.cpp:57

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0]
        
    Routine temporaries
        Total         :     189
            Global    :      29
            Local     :     160
        Regenerable   :      68
        Spilled       :       8
        
    Routine stack
        Variables     :     536 bytes*
            Reads     :      18 [3.00e+00 ~ 0.7%]
            Writes    :      45 [1.84e+01 ~ 4.1%]
        Spills        :      16 bytes*
            Reads     :       3 [1.18e+01 ~ 2.6%]
            Writes    :       2 [4.40e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: print_matrix(char *, int, int, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (print_matrix(char *, int, int, float *)) [17/83=20.5%] cuda_dpposeEstimation.cpp(74,1)
  -> EXTERN: (76,9) printf(const char *, ...)
  -> (81,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (81,20) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (83,14) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(77,9)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:std::basic_ostream<char, std::char_traits<char>>::operator< (81:8) and call:std::operator<<<std::char_traits<char>>(std::basic_ostream< (83:14)
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:std::operator<<<std::char_traits<char>>(std::basic_ostream< (83:14) and call:std::basic_ostream<char, std::char_traits<char>>::operator< (81:8)
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) cannot be vectorized   [ cuda_dpposeEstimation.cpp(81,8) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ cuda_dpposeEstimation.cpp(81,20) ]
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ cuda_dpposeEstimation.cpp(83,14) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:std::basic_ostream<char, std::char_traits<char>>::operator< (81:8) and call:std::operator<<<std::char_traits<char>>(std::basic_ostream< (83:14)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:std::operator<<<std::char_traits<char>>(std::basic_ostream< (83:14) and call:std::basic_ostream<char, std::char_traits<char>>::operator< (81:8)

   LOOP BEGIN at cuda_dpposeEstimation.cpp(79,10)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) cannot be vectorized   [ cuda_dpposeEstimation.cpp(81,8) ]
      remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ cuda_dpposeEstimation.cpp(81,20) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(74,1):remark #34051: REGISTER ALLOCATION : [_Z12print_matrixPciiPf] cuda_dpposeEstimation.cpp:74

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r12-r15 zmm0]
        
    Routine temporaries
        Total         :      37
            Global    :      20
            Local     :      17
        Regenerable   :      11
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [1.17e+01 ~ 3.0%]
            Writes    :       5 [1.17e+01 ~ 3.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: displayValues(float *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (displayValues(float *, int)) [18/83=21.7%] cuda_dpposeEstimation.cpp(88,1)
  -> INLINE (MANUAL): (89,7) std::ios_base::precision(std::ios_base *, std::streamsize) (isz = 1) (sz = 10)
  -> (92,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (92,32) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (92,47) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(90,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15382: vectorization support: call to function std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) cannot be vectorized   [ cuda_dpposeEstimation.cpp(92,8) ]
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) cannot be vectorized   [ cuda_dpposeEstimation.cpp(92,32) ]
   remark #15382: vectorization support: call to function std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) cannot be vectorized   [ cuda_dpposeEstimation.cpp(92,47) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(88,1):remark #34051: REGISTER ALLOCATION : [_Z13displayValuesPfi] cuda_dpposeEstimation.cpp:88

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rsi rdi r12-r14 zmm0]
        
    Routine temporaries
        Total         :      28
            Global    :      16
            Local     :      12
        Regenerable   :       6
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [2.70e+00 ~ 2.8%]
            Writes    :       3 [2.70e+00 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: rowMean(float *, int, int, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (rowMean(float *, int, int, float *)) [19/83=22.9%] cuda_dpposeEstimation.cpp(97,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(99,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between variable[j*col+i] (104:4) and mean[j] (106:3)
   remark #17106: parallel dependence: assumed FLOW dependence between mean[j] (106:3) and variable[j*col+i] (104:4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(102,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(102,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference variable[j*col+i] has unaligned access   [ cuda_dpposeEstimation.cpp(104,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 3.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 5.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(102,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference variable[j*col+i] has unaligned access   [ cuda_dpposeEstimation.cpp(104,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 6.333
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(97,1):remark #34051: REGISTER ALLOCATION : [_Z7rowMeanPfiiS_] cuda_dpposeEstimation.cpp:97

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r12 r14-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :      59
            Global    :      32
            Local     :      27
        Regenerable   :       6
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [3.60e+00 ~ 0.5%]
            Writes    :       4 [3.60e+00 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Scalc(float *, int, int, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Scalc(float *, int, int, float *)) [20/83=24.1%] cuda_dpposeEstimation.cpp(112,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(113,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between mean[j] (117:56) and variable[j*col+i] (117:4)
   remark #17106: parallel dependence: assumed FLOW dependence between variable[j*col+i] (117:4) and mean[j] (117:56)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(115,3)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(115,3)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference variable[j*col+i] has aligned access   [ cuda_dpposeEstimation.cpp(117,4) ]
      remark #15388: vectorization support: reference variable[j*col+i] has aligned access   [ cuda_dpposeEstimation.cpp(117,30) ]
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.100
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 8.360 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(115,3)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference variable[j*col+i] has unaligned access   [ cuda_dpposeEstimation.cpp(117,4) ]
      remark #15389: vectorization support: reference variable[j*col+i] has unaligned access   [ cuda_dpposeEstimation.cpp(117,30) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.700
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(115,3)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(115,3)
   <Multiversioned v2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between variable[j*col+i] (117:4) and mean[j] (117:4)
      remark #17106: parallel dependence: assumed ANTI dependence between mean[j] (117:4) and variable[j*col+i] (117:4)
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(115,3)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(112,1):remark #34051: REGISTER ALLOCATION : [_Z5ScalcPfiiS_] cuda_dpposeEstimation.cpp:112

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :      81
            Global    :      35
            Local     :      46
        Regenerable   :       2
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :      29 [9.00e-01 ~ 0.1%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: newScalc(float *, int, int, float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (newScalc(float *, int, int, float)) [21/83=25.3%] cuda_dpposeEstimation.cpp(142,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(143,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(145,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(145,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference variable[i*col+j] has aligned access   [ cuda_dpposeEstimation.cpp(147,3) ]
      remark #15388: vectorization support: reference variable[i*col+j] has aligned access   [ cuda_dpposeEstimation.cpp(147,29) ]
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.157
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 31 
      remark #15477: vector cost: 4.370 
      remark #15478: estimated potential speedup: 5.660 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(145,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference variable[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(147,3) ]
      remark #15389: vectorization support: reference variable[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(147,29) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.425
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(145,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(142,1):remark #34051: REGISTER ALLOCATION : [_Z8newScalcPfiif] cuda_dpposeEstimation.cpp:142

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rsi rdi r8-r13 zmm0-zmm5]
        
    Routine temporaries
        Total         :      64
            Global    :      31
            Local     :      33
        Regenerable   :       2
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       2 [1.80e+00 ~ 0.2%]
            Writes    :       2 [1.80e+00 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: initializeZero(float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (initializeZero(float *, int, int)) [22/83=26.5%] cuda_dpposeEstimation.cpp(153,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(154,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between variable[i*col+j] (158:3) and variable[i*col+j] (158:3)
   remark #17106: parallel dependence: assumed OUTPUT dependence between variable[i*col+j] (158:3) and variable[i*col+j] (158:3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(156,3)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between variable[i*col+j] (158:3) and variable[i*col+j] (158:3)
      remark #17106: parallel dependence: assumed OUTPUT dependence between variable[i*col+j] (158:3) and variable[i*col+j] (158:3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(156,3)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference variable[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(158,3) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.620 
         remark #15478: estimated potential speedup: 5.330 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(156,3)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(158,3):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(158,3):remark #34026: call to memset implemented as a call to optimized library version
cuda_dpposeEstimation.cpp(153,1):remark #34051: REGISTER ALLOCATION : [_Z14initializeZeroPfii] cuda_dpposeEstimation.cpp:153

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      24
            Global    :      17
            Local     :       7
        Regenerable   :       3
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       3 [1.00e+01 ~ 2.3%]
            Writes    :       2 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: meanCalc(float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (meanCalc(float *, int, int)) [23/83=27.7%] cuda_dpposeEstimation.cpp(164,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(168,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(170,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(170,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference variable[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(172,15) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.833
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 8.080 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(170,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference variable[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(172,15) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 5.429
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(170,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(164,1):remark #34051: REGISTER ALLOCATION : [_Z8meanCalcPfii] cuda_dpposeEstimation.cpp:164

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r13 zmm0-zmm10]
        
    Routine temporaries
        Total         :      81
            Global    :      32
            Local     :      49
        Regenerable   :       6
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [2.70e+00 ~ 0.3%]
            Writes    :       3 [2.70e+00 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: TransposeOnCPU(float *, float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (TransposeOnCPU(float *, float *, int, int)) [24/83=28.9%] cuda_dpposeEstimation.cpp(184,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(186,2)
   remark #25445: Loop Interchange not done due to: Data Dependencies
   remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
   remark #25447: Dependence found between following statements:  [190 -> (Flow) 190]
   remark #25447: Dependence found between following statements:  [190 -> (Anti) 190]
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between matrix[i*col+j] (190:32) and matrixTranspose[j*row+i] (190:3)
   remark #17106: parallel dependence: assumed FLOW dependence between matrixTranspose[j*row+i] (190:3) and matrix[i*col+j] (190:32)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(188,3)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=15
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(188,3)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference matrix[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(190,32) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <matrixTranspose[j*row+i]>, stride is unknown to compiler   [ cuda_dpposeEstimation.cpp(190,3) ]
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.135
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 4.620 
      remark #15478: estimated potential speedup: 1.060 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(188,3)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(188,3)
   <Multiversioned v2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between matrixTranspose[j*row+i] (190:3) and matrix[i*col+j] (190:3)
      remark #17106: parallel dependence: assumed ANTI dependence between matrix[i*col+j] (190:3) and matrixTranspose[j*row+i] (190:3)
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(188,3)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(184,1):remark #34051: REGISTER ALLOCATION : [_Z14TransposeOnCPUPfS_ii] cuda_dpposeEstimation.cpp:184

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      98
            Global    :      40
            Local     :      58
        Regenerable   :       1
        Spilled       :      17
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      96 bytes*
            Reads     :      41 [2.70e+01 ~ 2.8%]
            Writes    :      16 [2.07e+01 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: cpuTransMatrixMult(float *, float *, float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (cpuTransMatrixMult(float *, float *, float *, int, int)) [25/83=30.1%] cuda_dpposeEstimation.cpp(197,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(199,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between A[i*col+k] (206:4) and C[i*row+j] (208:3)
   remark #17106: parallel dependence: assumed FLOW dependence between C[i*row+j] (208:3) and A[i*col+k] (206:4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(201,3)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between A[i*col+k] (206:4) and C[i*row+j] (208:3)
      remark #17106: parallel dependence: assumed FLOW dependence between C[i*row+j] (208:3) and A[i*col+k] (206:4)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(204,4)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(204,4)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference A[i*col+k] has unaligned access   [ cuda_dpposeEstimation.cpp(206,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <B[k*row+j]>, stride is unknown to compiler   [ cuda_dpposeEstimation.cpp(206,30) ]
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.659
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 5.500 
         remark #15478: estimated potential speedup: 1.420 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(204,4)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(197,1):remark #34051: REGISTER ALLOCATION : [_Z18cpuTransMatrixMultPfS_S_ii] cuda_dpposeEstimation.cpp:197

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm12]
        
    Routine temporaries
        Total         :      86
            Global    :      44
            Local     :      42
        Regenerable   :       5
        Spilled       :      19
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     136 bytes*
            Reads     :      17 [1.83e+02 ~ 2.8%]
            Writes    :      17 [8.79e+01 ~ 1.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: initialize(float *, float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (initialize(float *, float *, int, int)) [26/83=31.3%] cuda_dpposeEstimation.cpp(214,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(215,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between variable2[i*col+j] (217:3) and variable[i*col+j] (219:3)
   remark #17106: parallel dependence: assumed FLOW dependence between variable[i*col+j] (219:3) and variable2[i*col+j] (217:3)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ cuda_dpposeEstimation.cpp(219,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between variable2[i*col+j] (217:3) and variable[i*col+j] (219:3)
   remark #15346: vector dependence: assumed FLOW dependence between variable[i*col+j] (219:3) and variable2[i*col+j] (217:3)

   LOOP BEGIN at cuda_dpposeEstimation.cpp(217,3)
      remark #25401: memcopy(with guard) generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between variable2[i*col+j] (217:3) and variable[i*col+j] (219:3)
      remark #17106: parallel dependence: assumed FLOW dependence between variable[i*col+j] (219:3) and variable2[i*col+j] (217:3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at cuda_dpposeEstimation.cpp(217,3)
      <Multiversioned v2>
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed FLOW dependence between variable[i*col+j] (219:3) and variable2[i*col+j] (219:3)
         remark #17106: parallel dependence: assumed ANTI dependence between variable2[i*col+j] (219:3) and variable[i*col+j] (219:3)
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(217,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(219,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(219,3):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(219,3):remark #34026: call to memcpy implemented as a call to optimized library version
cuda_dpposeEstimation.cpp(214,1):remark #34051: REGISTER ALLOCATION : [_Z10initializePfS_ii] cuda_dpposeEstimation.cpp:214

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      45
            Global    :      22
            Local     :      23
        Regenerable   :       2
        Spilled       :      10
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      80 bytes*
            Reads     :      27 [2.39e+01 ~ 6.5%]
            Writes    :      10 [2.70e+00 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: cpuMatrixMult(float *, float *, float *, int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (cpuMatrixMult(float *, float *, float *, int, int, int)) [27/83=32.5%] cuda_dpposeEstimation.cpp(225,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(228,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between A[i*col+k] (235:4) and C[i*col2+j] (239:3)
   remark #17106: parallel dependence: assumed FLOW dependence between C[i*col2+j] (239:3) and A[i*col+k] (235:4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between A[i*col+k] (235:4) and C[i*col2+j] (239:3)
      remark #17106: parallel dependence: assumed FLOW dependence between C[i*col2+j] (239:3) and A[i*col+k] (235:4)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference A[i*col+k] has unaligned access   [ cuda_dpposeEstimation.cpp(235,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <B[k*col2+j]>, stride is unknown to compiler   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.659
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 5.500 
         remark #15478: estimated potential speedup: 1.420 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(225,1):remark #34051: REGISTER ALLOCATION : [_Z13cpuMatrixMultPfS_S_iii] cuda_dpposeEstimation.cpp:225

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm12]
        
    Routine temporaries
        Total         :      88
            Global    :      46
            Local     :      42
        Regenerable   :       5
        Spilled       :      21
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     144 bytes*
            Reads     :      18 [1.89e+02 ~ 2.8%]
            Writes    :      18 [9.54e+01 ~ 1.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: scalarToMatrixMultiply(float *, float *, float, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (scalarToMatrixMultiply(float *, float *, float, int, int)) [28/83=33.7%] cuda_dpposeEstimation.cpp(246,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(247,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between M[i*col+j] (251:28) and Temp[i*col+j] (251:3)
   remark #17106: parallel dependence: assumed FLOW dependence between Temp[i*col+j] (251:3) and M[i*col+j] (251:28)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(249,3)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(249,3)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference Temp[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(251,3) ]
      remark #15389: vectorization support: reference M[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(251,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.167
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 6.680 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(249,3)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference Temp[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(251,3) ]
      remark #15389: vectorization support: reference M[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(251,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.700
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(249,3)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(249,3)
   <Multiversioned v2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between Temp[i*col+j] (251:3) and M[i*col+j] (251:3)
      remark #17106: parallel dependence: assumed ANTI dependence between M[i*col+j] (251:3) and Temp[i*col+j] (251:3)
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(249,3)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(246,1):remark #34051: REGISTER ALLOCATION : [_Z22scalarToMatrixMultiplyPfS_fii] cuda_dpposeEstimation.cpp:246

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :      75
            Global    :      35
            Local     :      40
        Regenerable   :       1
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      64 bytes*
            Reads     :      38 [1.12e+00 ~ 0.2%]
            Writes    :       8 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: sumOfMatrix(float *, float *, float *, float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (sumOfMatrix(float *, float *, float *, float *, int, int)) [29/83=34.9%] cuda_dpposeEstimation.cpp(257,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(258,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between temp2[i*col+j] (262:23) and Znum[i*col+j] (262:3)
   remark #17106: parallel dependence: assumed FLOW dependence between Znum[i*col+j] (262:3) and temp2[i*col+j] (262:23)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(260,3)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(260,3)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference Znum[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,3) ]
      remark #15389: vectorization support: reference temp2[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,23) ]
      remark #15389: vectorization support: reference temp3[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,44) ]
      remark #15389: vectorization support: reference temp4[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.950
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 6.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(260,3)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference Znum[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,3) ]
      remark #15389: vectorization support: reference temp2[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,23) ]
      remark #15389: vectorization support: reference temp3[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,44) ]
      remark #15389: vectorization support: reference temp4[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.375
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(260,3)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(260,3)
   <Multiversioned v2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between Znum[i*col+j] (262:3) and temp4[i*col+j] (262:3)
      remark #17106: parallel dependence: assumed ANTI dependence between temp4[i*col+j] (262:3) and Znum[i*col+j] (262:3)
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(260,3)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(257,1):remark #34051: REGISTER ALLOCATION : [_Z11sumOfMatrixPfS_S_S_ii] cuda_dpposeEstimation.cpp:257

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :      97
            Global    :      42
            Local     :      55
        Regenerable   :       1
        Spilled       :      15
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     120 bytes*
            Reads     :      32 [4.80e+01 ~ 5.9%]
            Writes    :      15 [1.62e+01 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: addScalarToDiagonal(float *, float *, float, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (addScalarToDiagonal(float *, float *, float, int, int)) [30/83=36.1%] cuda_dpposeEstimation.cpp(268,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(269,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between Zden[i*col+j] (275:4) and BBt[i*col+j] (279:4)
   remark #17106: parallel dependence: assumed ANTI dependence between BBt[i*col+j] (279:4) and Zden[i*col+j] (275:4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between Zden[i*col+j] (279:4) and Zden[i*col+j] (279:4)
   remark #15346: vector dependence: assumed OUTPUT dependence between Zden[i*col+j] (279:4) and Zden[i*col+j] (279:4)

   LOOP BEGIN at cuda_dpposeEstimation.cpp(271,3)
   <Predicate Optimized v1>
      remark #25423: Condition at line 273 hoisted out of this loop
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between Zden[i*col+j] (279:4) and BBt[i*col+j] (279:4)
      remark #15346: vector dependence: assumed ANTI dependence between BBt[i*col+j] (279:4) and Zden[i*col+j] (279:4)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(271,3)
   <Remainder, Predicate Optimized v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(271,3)
   <Predicate Optimized v2>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between Zden[i*col+j] (279:4) and BBt[i*col+j] (279:4)
      remark #15346: vector dependence: assumed ANTI dependence between BBt[i*col+j] (279:4) and Zden[i*col+j] (279:4)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(271,3)
   <Remainder, Predicate Optimized v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(268,1):remark #34051: REGISTER ALLOCATION : [_Z19addScalarToDiagonalPfS_fii] cuda_dpposeEstimation.cpp:268

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      58
            Global    :      28
            Local     :      30
        Regenerable   :       1
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       7 [9.90e+00 ~ 1.1%]
            Writes    :       7 [9.90e+00 ~ 1.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: cpuInverseOfMatrix(float *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (cpuInverseOfMatrix(float *, int)) [31/83=37.3%] cuda_dpposeEstimation.cpp(287,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(289,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between matrix[m*(col*2)+i] (299:5) and matrix[(k*2)*col+l] (334:5)
   remark #17106: parallel dependence: assumed OUTPUT dependence between matrix[(k*2)*col+l] (334:5) and matrix[m*(col*2)+i] (299:5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(297,5)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(297,5)
   <Multiversioned v1>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference matrix[m*(col*2)+i] has aligned access   [ cuda_dpposeEstimation.cpp(299,5) ]
      remark #15388: vectorization support: reference matrix[(m-1)*(col*2)+i] has aligned access   [ cuda_dpposeEstimation.cpp(299,35) ]
      remark #15388: vectorization support: reference matrix[m*(col*2)+i] has aligned access   [ cuda_dpposeEstimation.cpp(299,71) ]
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 8.390 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(297,5)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference matrix[m*(col*2)+i] has unaligned access   [ cuda_dpposeEstimation.cpp(299,5) ]
      remark #15389: vectorization support: reference matrix[(m-1)*(col*2)+i] has unaligned access   [ cuda_dpposeEstimation.cpp(299,35) ]
      remark #15389: vectorization support: reference matrix[m*(col*2)+i] has unaligned access   [ cuda_dpposeEstimation.cpp(299,71) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.600
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(297,5)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(297,5)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(297,5)
   <Multiversioned v1>
      remark #25230: Loop multiversioned for Same base arrays
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference matrix[m*(col*2)+i] has aligned access   [ cuda_dpposeEstimation.cpp(299,5) ]
      remark #15389: vectorization support: reference matrix[(m-1)*(col*2)+i] has unaligned access   [ cuda_dpposeEstimation.cpp(299,35) ]
      remark #15388: vectorization support: reference matrix[m*(col*2)+i] has aligned access   [ cuda_dpposeEstimation.cpp(299,71) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.083
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 7.380 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(297,5)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference matrix[m*(col*2)+i] has unaligned access   [ cuda_dpposeEstimation.cpp(299,5) ]
      remark #15389: vectorization support: reference matrix[(m-1)*(col*2)+i] has unaligned access   [ cuda_dpposeEstimation.cpp(299,35) ]
      remark #15389: vectorization support: reference matrix[m*(col*2)+i] has unaligned access   [ cuda_dpposeEstimation.cpp(299,71) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.583
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(297,5)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(297,5)
   <Multiversioned v3>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between matrix[m*(col*2)+i] (299:5) and matrix[(m-1)*(col*2)+i] (299:5)
      remark #17106: parallel dependence: assumed ANTI dependence between matrix[(m-1)*(col*2)+i] (299:5) and matrix[m*(col*2)+i] (299:5)
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(297,5)
   <Remainder, Multiversioned v3>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(304,12)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(304,12)
   <Multiversioned v1>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference matrix[(m*2)*col+i] has aligned access   [ cuda_dpposeEstimation.cpp(306,5) ]
      remark #15388: vectorization support: reference matrix[((m+1)*2)*col+i] has aligned access   [ cuda_dpposeEstimation.cpp(306,33) ]
      remark #15388: vectorization support: reference matrix[(m*2)*col+i] has aligned access   [ cuda_dpposeEstimation.cpp(306,67) ]
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 8.390 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(304,12)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference matrix[(m*2)*col+i] has unaligned access   [ cuda_dpposeEstimation.cpp(306,5) ]
      remark #15389: vectorization support: reference matrix[((m+1)*2)*col+i] has unaligned access   [ cuda_dpposeEstimation.cpp(306,33) ]
      remark #15389: vectorization support: reference matrix[(m*2)*col+i] has unaligned access   [ cuda_dpposeEstimation.cpp(306,67) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.600
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(304,12)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(304,12)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(304,12)
   <Multiversioned v1>
      remark #25230: Loop multiversioned for Same base arrays
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference matrix[(m*2)*col+i] has aligned access   [ cuda_dpposeEstimation.cpp(306,5) ]
      remark #15389: vectorization support: reference matrix[((m+1)*2)*col+i] has unaligned access   [ cuda_dpposeEstimation.cpp(306,33) ]
      remark #15388: vectorization support: reference matrix[(m*2)*col+i] has aligned access   [ cuda_dpposeEstimation.cpp(306,67) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.083
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 7.380 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(304,12)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference matrix[(m*2)*col+i] has unaligned access   [ cuda_dpposeEstimation.cpp(306,5) ]
      remark #15389: vectorization support: reference matrix[((m+1)*2)*col+i] has unaligned access   [ cuda_dpposeEstimation.cpp(306,33) ]
      remark #15389: vectorization support: reference matrix[(m*2)*col+i] has unaligned access   [ cuda_dpposeEstimation.cpp(306,67) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.583
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(304,12)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(304,12)
   <Peeled loop for vectorization, Multiversioned v3>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(304,12)
   <Multiversioned v3>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference matrix[(m*2)*col+i] has aligned access   [ cuda_dpposeEstimation.cpp(306,5) ]
      remark #15389: vectorization support: reference matrix[((m+1)*2)*col+i] has unaligned access   [ cuda_dpposeEstimation.cpp(306,33) ]
      remark #15388: vectorization support: reference matrix[(m*2)*col+i] has aligned access   [ cuda_dpposeEstimation.cpp(306,67) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.083
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 7.380 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(304,12)
   <Remainder loop for vectorization, Multiversioned v3>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(312,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(312,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference matrix[m*(col*2)+j] has aligned access   [ cuda_dpposeEstimation.cpp(314,3) ]
      remark #15388: vectorization support: reference matrix[m*(col*2)+j] has aligned access   [ cuda_dpposeEstimation.cpp(314,33) ]
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.157
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 31 
      remark #15477: vector cost: 4.370 
      remark #15478: estimated potential speedup: 5.660 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(312,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference matrix[m*(col*2)+j] has unaligned access   [ cuda_dpposeEstimation.cpp(314,3) ]
      remark #15389: vectorization support: reference matrix[m*(col*2)+j] has unaligned access   [ cuda_dpposeEstimation.cpp(314,33) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.425
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(312,3)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(318,3)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between matrix[m+k*(col*2)] (321:4) and matrix[(k*2)*col+l] (334:5)
      remark #17106: parallel dependence: assumed FLOW dependence between matrix[(k*2)*col+l] (334:5) and matrix[m+k*(col*2)] (321:4)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at cuda_dpposeEstimation.cpp(328,5)
      <Multiversioned v1>
         remark #25228: Loop multiversioned for Data Dependence
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed FLOW dependence between matrix[(k*2)*col+l] (334:5) and matrix[m*(col*2)+l] (334:5)
         remark #17106: parallel dependence: assumed ANTI dependence between matrix[m*(col*2)+l] (334:5) and matrix[(k*2)*col+l] (334:5)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between matrix[(k*2)*col+l] (334:5) and matrix[m*(col*2)+l] (334:5)
         remark #15346: vector dependence: assumed ANTI dependence between matrix[m*(col*2)+l] (334:5) and matrix[(k*2)*col+l] (334:5)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(328,5)
      <Remainder, Multiversioned v1>
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(328,5)
      <Multiversioned v2>
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed FLOW dependence between matrix[(k*2)*col+l] (334:5) and matrix[m*(col*2)+m] (334:5)
         remark #17106: parallel dependence: assumed ANTI dependence between matrix[m*(col*2)+m] (334:5) and matrix[(k*2)*col+l] (334:5)
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(328,5)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(287,1):remark #34051: REGISTER ALLOCATION : [_Z18cpuInverseOfMatrixPfi] cuda_dpposeEstimation.cpp:287

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm9]
        
    Routine temporaries
        Total         :     379
            Global    :     120
            Local     :     259
        Regenerable   :       3
        Spilled       :      21
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     168 bytes*
            Reads     :      43 [8.34e+01 ~ 3.2%]
            Writes    :      27 [5.96e+01 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: eye(float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (eye(float *, int, int)) [32/83=38.6%] cuda_dpposeEstimation.cpp(343,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(344,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(346,17)
   <Peeled loop for vectorization, Predicate Optimized v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(346,17)
   <Predicate Optimized v1>
      remark #25423: Condition at line 348 hoisted out of this loop
      remark #15389: vectorization support: reference I[i*n+j] has unaligned access   [ cuda_dpposeEstimation.cpp(354,33) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 7.220 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(346,17)
   <Remainder loop for vectorization, Predicate Optimized v1>
      remark #15389: vectorization support: reference I[i*n+j] has unaligned access   [ cuda_dpposeEstimation.cpp(354,33) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 2.167
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(346,17)
   <Remainder loop for vectorization, Predicate Optimized v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(346,17)
   <Peeled loop for vectorization, Predicate Optimized v2>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(346,17)
   <Predicate Optimized v2>
      remark #15389: vectorization support: reference I[i*n+j] has unaligned access   [ cuda_dpposeEstimation.cpp(354,33) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 7.220 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(346,17)
   <Remainder loop for vectorization, Predicate Optimized v2>
      remark #15389: vectorization support: reference I[i*n+j] has unaligned access   [ cuda_dpposeEstimation.cpp(354,33) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 2.167
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(346,17)
   <Remainder loop for vectorization, Predicate Optimized v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(343,1):remark #34051: REGISTER ALLOCATION : [_Z3eyePfii] cuda_dpposeEstimation.cpp:343

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      86
            Global    :      46
            Local     :      40
        Regenerable   :       5
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       7 [1.35e+01 ~ 0.7%]
            Writes    :       7 [1.35e+01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: matInv(float *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (matInv(float *, int)) [33/83=39.8%] cuda_dpposeEstimation.cpp(361,1)
  -> EXTERN: (362,6) _vla_free(void *, long)
  -> EXTERN: (362,6) _vla_alloc(long)
  -> EXTERN: (365,8) LAPACKE_sgetrf(int, int, int, float *, int, int *)
  -> EXTERN: (369,10) _vla_free(void *, long)
  -> EXTERN: (372,8) LAPACKE_sgetri(int, int, float *, int, const int *)
  -> EXTERN: (375,9) _vla_free(void *, long)


    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(361,1):remark #34051: REGISTER ALLOCATION : [_Z6matInvPfi] cuda_dpposeEstimation.cpp:361

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rsi rdi r8-r9 r12 r14-r15]
        
    Routine temporaries
        Total         :      45
            Global    :      15
            Local     :      30
        Regenerable   :       2
        Spilled       :       4
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       1 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calculateZ_preZden(float *, float *, float *, float *, float *, float *, float, float *, float *, int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calculateZ_preZden(float *, float *, float *, float *, float *, float *, float, float *, float *, int, int, int)) [34/83=41.0%] cuda_dpposeEstimation.cpp(452,1)
  -> EXTERN: (453,38) operator new[](std::size_t)
  -> EXTERN: (453,38) __cxa_throw_bad_array_new_length()
  -> EXTERN: (454,39) operator new[](std::size_t)
  -> EXTERN: (454,39) __cxa_throw_bad_array_new_length()
  -> EXTERN: (455,39) operator new[](std::size_t)
  -> EXTERN: (455,39) __cxa_throw_bad_array_new_length()
  -> EXTERN: (456,38) operator new[](std::size_t)
  -> EXTERN: (456,38) __cxa_throw_bad_array_new_length()
  -> INLINE: (470,9) cpuMatrixMult(float *, float *, float *, int, int, int) (isz = 55) (sz = 70)
  -> INLINE: (474,9) scalarToMatrixMultiply(float *, float *, float, int, int) (isz = 32) (sz = 45)
  -> INLINE: (478,9) sumOfMatrix(float *, float *, float *, float *, int, int) (isz = 42) (sz = 57)
  -> INLINE: (482,9) cpuMatrixMult(float *, float *, float *, int, int, int) (isz = 55) (sz = 70)
  -> EXTERN: (484,2) operator delete[](void *)
  -> EXTERN: (485,9) operator delete[](void *)
  -> EXTERN: (486,9) operator delete[](void *)
  -> EXTERN: (487,9) operator delete[](void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(462,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(464,17)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(464,17)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference temp[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(466,17) ]
      remark #15389: vectorization support: reference xy[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(466,37) ]
      remark #15389: vectorization support: reference E[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(466,55) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.944
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 1.120 
      remark #15478: estimated potential speedup: 6.970 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(464,17)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference temp[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(466,17) ]
      remark #15389: vectorization support: reference xy[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(466,37) ]
      remark #15389: vectorization support: reference E[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(466,55) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.429
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(464,17)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(228,2) inlined into cuda_dpposeEstimation.cpp(470,9)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between temp2[i*row1+j] (232:3) and temp2[i*row1+j] (232:3)
   remark #17106: parallel dependence: assumed OUTPUT dependence between temp2[i*row1+j] (232:3) and temp2[i*row1+j] (232:3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(470,9)
   <Distributed chunk1>
      remark #25087: Preprocess Loopnests: Sinking 1 Stmts Into Inner LOOP to Create Perfect Nest 
      remark #25426: Loop Distributed (2 way) 
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between temp2[i*row1+j] (232:3) and temp2[i*row1+j] (232:3)
      remark #17106: parallel dependence: assumed OUTPUT dependence between temp2[i*row1+j] (232:3) and temp2[i*row1+j] (232:3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(470,9)
      <Distributed chunk1>
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.620 
         remark #15478: estimated potential speedup: 5.330 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(470,9)
      <Remainder loop for vectorization, Distributed chunk1>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(228,2) inlined into cuda_dpposeEstimation.cpp(470,9)
<Distributed chunk2>
   remark #25444: Loopnest Interchanged: ( 1 2 3 ) --> ( 1 3 2 )
   remark #25229: Loop multiversioned for Trip-count
   remark #25459: Loopnest replaced by matmul intrinsic
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(228,2) inlined into cuda_dpposeEstimation.cpp(470,9)
<Distributed chunk2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #25440: unrolled and jammed by 4   (pre-vector) 
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(470,9)
   <Distributed chunk2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between temp2[i*row1+j] (235:4) and temp2[i*row1+j] (235:4)
      remark #17106: parallel dependence: assumed OUTPUT dependence between temp2[i*row1+j] (235:4) and temp2[i*row1+j] (235:4)
      remark #25440: unrolled and jammed by 4   (pre-vector) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(470,9)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(470,9)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.580
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 8 
         remark #15451: unmasked unaligned unit stride stores: 16 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 168 
         remark #15477: vector cost: 17.870 
         remark #15478: estimated potential speedup: 6.950 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(470,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(470,9)
   <Remainder, Distributed chunk2>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(470,9)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(470,9)
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.950
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 5 
         remark #15451: unmasked unaligned unit stride stores: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 42 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 6.350 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(470,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(228,2) inlined into cuda_dpposeEstimation.cpp(470,9)
<Remainder, Distributed chunk2>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(470,9)
   <Distributed chunk2>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(470,9)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(470,9)
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(239,3) ]
         remark #15389: vectorization support: reference B_transpose[k*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.750
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 11 
         remark #15477: vector cost: 1.000 
         remark #15478: estimated potential speedup: 7.600 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(470,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(247,2) inlined into cuda_dpposeEstimation.cpp(474,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(249,3) inlined into cuda_dpposeEstimation.cpp(474,9)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(249,3) inlined into cuda_dpposeEstimation.cpp(474,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference temp3[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(251,3) ]
      remark #15389: vectorization support: reference M[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(251,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.167
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 6.680 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(249,3) inlined into cuda_dpposeEstimation.cpp(474,9)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference temp3[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(251,3) ]
      remark #15389: vectorization support: reference M[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(251,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.700
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(249,3) inlined into cuda_dpposeEstimation.cpp(474,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(258,2) inlined into cuda_dpposeEstimation.cpp(478,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(260,3) inlined into cuda_dpposeEstimation.cpp(478,9)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(260,3) inlined into cuda_dpposeEstimation.cpp(478,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference Znum[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,3) ]
      remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,23) ]
      remark #15389: vectorization support: reference temp3[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,44) ]
      remark #15389: vectorization support: reference Y[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.950
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 6.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(260,3) inlined into cuda_dpposeEstimation.cpp(478,9)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference Znum[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,3) ]
      remark #15389: vectorization support: reference temp2[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,23) ]
      remark #15389: vectorization support: reference temp3[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,44) ]
      remark #15389: vectorization support: reference Y[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(262,65) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.375
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(260,3) inlined into cuda_dpposeEstimation.cpp(478,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(228,2) inlined into cuda_dpposeEstimation.cpp(482,9)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between Zden[k*row1+j] (235:4) and Z[i*row1+j] (239:3)
   remark #17106: parallel dependence: assumed FLOW dependence between Z[i*row1+j] (239:3) and Zden[k*row1+j] (235:4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(230,3) inlined into cuda_dpposeEstimation.cpp(482,9)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between Zden[k*row1+j] (235:4) and Z[i*row1+j] (239:3)
      remark #17106: parallel dependence: assumed FLOW dependence between Z[i*row1+j] (239:3) and Zden[k*row1+j] (235:4)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(482,9)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(482,9)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference Znum[i*row1+k] has unaligned access   [ cuda_dpposeEstimation.cpp(235,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <Zden[k*row1+j]>, stride is unknown to compiler   [ cuda_dpposeEstimation.cpp(235,30) ]
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.659
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 5.500 
         remark #15478: estimated potential speedup: 1.420 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(233,4) inlined into cuda_dpposeEstimation.cpp(482,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(232,3):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(232,3):remark #34026: call to memset implemented as a call to optimized library version
cuda_dpposeEstimation.cpp(452,1):remark #34051: REGISTER ALLOCATION : [_Z18calculateZ_preZdenPfS_S_S_S_S_fS_S_iii] cuda_dpposeEstimation.cpp:452

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     733
            Global    :     279
            Local     :     454
        Regenerable   :      26
        Spilled       :      77
        
    Routine stack
        Variables     :     288 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      36 [1.62e+01 ~ 0.0%]
        Spills        :     640 bytes*
            Reads     :     178 [1.93e+03 ~ 5.6%]
            Writes    :      88 [4.71e+02 ~ 1.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: differenceOfMatrix(float *, float *, float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (differenceOfMatrix(float *, float *, float *, int, int)) [35/83=42.2%] cuda_dpposeEstimation.cpp(492,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(493,9)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between matrix2[i*col+j] (497:66) and diffMatrix[i*col+j] (497:17)
   remark #17106: parallel dependence: assumed FLOW dependence between diffMatrix[i*col+j] (497:17) and matrix2[i*col+j] (497:66)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(495,17)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(495,17)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference diffMatrix[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(497,17) ]
      remark #15389: vectorization support: reference matrix1[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(497,43) ]
      remark #15389: vectorization support: reference matrix2[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(497,66) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.143
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 6.590 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(495,17)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference diffMatrix[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(497,17) ]
      remark #15389: vectorization support: reference matrix1[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(497,43) ]
      remark #15389: vectorization support: reference matrix2[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(497,66) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.583
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(495,17)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(495,17)
   <Multiversioned v2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between diffMatrix[i*col+j] (497:17) and matrix2[i*col+j] (497:17)
      remark #17106: parallel dependence: assumed ANTI dependence between matrix2[i*col+j] (497:17) and diffMatrix[i*col+j] (497:17)
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(495,17)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(492,1):remark #34051: REGISTER ALLOCATION : [_Z18differenceOfMatrixPfS_S_ii] cuda_dpposeEstimation.cpp:492

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      85
            Global    :      38
            Local     :      47
        Regenerable   :       1
        Spilled       :      11
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :      62 [2.15e+00 ~ 0.3%]
            Writes    :       9 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calculateQ(float *, float *, float *, float, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calculateQ(float *, float *, float *, float, int, int)) [36/83=43.4%] cuda_dpposeEstimation.cpp(503,1)
  -> EXTERN: (504,31) operator new[](std::size_t)
  -> EXTERN: (504,31) __cxa_throw_bad_array_new_length()
  -> INLINE: (506,2) scalarToMatrixMultiply(float *, float *, float, int, int) (isz = 32) (sz = 45)
  -> INLINE: (507,2) differenceOfMatrix(float *, float *, float *, int, int) (isz = 37) (sz = 50)
  -> EXTERN: (509,2) operator delete[](void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(247,2) inlined into cuda_dpposeEstimation.cpp(506,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(249,3) inlined into cuda_dpposeEstimation.cpp(506,2)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(249,3) inlined into cuda_dpposeEstimation.cpp(506,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference temp[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(251,3) ]
      remark #15389: vectorization support: reference Y[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(251,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.167
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 6.680 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(249,3) inlined into cuda_dpposeEstimation.cpp(506,2)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference temp[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(251,3) ]
      remark #15389: vectorization support: reference Y[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(251,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.700
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(249,3) inlined into cuda_dpposeEstimation.cpp(506,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(493,9) inlined into cuda_dpposeEstimation.cpp(507,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between Z[i*row1+j] (497:43) and Q[i*row1+j] (497:17)
   remark #17106: parallel dependence: assumed FLOW dependence between Q[i*row1+j] (497:17) and Z[i*row1+j] (497:43)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(495,17) inlined into cuda_dpposeEstimation.cpp(507,2)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(495,17) inlined into cuda_dpposeEstimation.cpp(507,2)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference Q[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(497,17) ]
      remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(497,43) ]
      remark #15389: vectorization support: reference temp[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(497,66) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.143
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 6.590 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(495,17) inlined into cuda_dpposeEstimation.cpp(507,2)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference Q[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(497,17) ]
      remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(497,43) ]
      remark #15389: vectorization support: reference temp[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(497,66) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.583
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(495,17) inlined into cuda_dpposeEstimation.cpp(507,2)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(495,17) inlined into cuda_dpposeEstimation.cpp(507,2)
   <Multiversioned v2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between Q[i*row1+j] (497:17) and Z[i*row1+j] (497:17)
      remark #17106: parallel dependence: assumed ANTI dependence between Z[i*row1+j] (497:17) and Q[i*row1+j] (497:17)
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(495,17) inlined into cuda_dpposeEstimation.cpp(507,2)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(503,1):remark #34051: REGISTER ALLOCATION : [_Z10calculateQPfS_S_fii] cuda_dpposeEstimation.cpp:503

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     142
            Global    :      62
            Local     :      80
        Regenerable   :       4
        Spilled       :      12
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :      21 [1.57e+01 ~ 1.0%]
            Writes    :      10 [3.23e+00 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: updateDualvariable(float *, float, float *, float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (updateDualvariable(float *, float, float *, float *, int, int)) [37/83=44.6%] cuda_dpposeEstimation.cpp(654,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(655,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between M[i*row1+j] (659:25) and Y[i*row1+j] (659:4)
   remark #17106: parallel dependence: assumed FLOW dependence between Y[i*row1+j] (659:4) and M[i*row1+j] (659:25)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(657,3)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(657,3)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference Y[i*row1+j] has aligned access   [ cuda_dpposeEstimation.cpp(659,4) ]
      remark #15388: vectorization support: reference Y[i*row1+j] has aligned access   [ cuda_dpposeEstimation.cpp(659,4) ]
      remark #15389: vectorization support: reference M[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(659,25) ]
      remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(659,41) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.773
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 13 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 6.850 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(657,3)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference Y[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(659,4) ]
      remark #15389: vectorization support: reference Y[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(659,4) ]
      remark #15389: vectorization support: reference M[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(659,25) ]
      remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(659,41) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.278
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(657,3)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(657,3)
   <Multiversioned v2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between Y[i*row1+j] (659:4) and Z[i*row1+j] (659:4)
      remark #17106: parallel dependence: assumed ANTI dependence between Z[i*row1+j] (659:4) and Y[i*row1+j] (659:4)
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(657,3)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(654,1):remark #34051: REGISTER ALLOCATION : [_Z18updateDualvariablePffS_S_ii] cuda_dpposeEstimation.cpp:654

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :      94
            Global    :      40
            Local     :      54
        Regenerable   :       1
        Spilled       :       9
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :      21 [2.97e+01 ~ 3.8%]
            Writes    :       9 [6.30e+00 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: febNorm(float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (febNorm(float *, int, int)) [38/83=45.8%] cuda_dpposeEstimation.cpp(680,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(683,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(685,17)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(685,17)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference a[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(687,26) ]
      remark #15389: vectorization support: reference a[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(687,43) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.714
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 6.700 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(685,17)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference a[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(687,26) ]
      remark #15389: vectorization support: reference a[i*col+j] has unaligned access   [ cuda_dpposeEstimation.cpp(687,43) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 4.750
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(685,17)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(680,1):remark #34051: REGISTER ALLOCATION : [_Z7febNormPfii] cuda_dpposeEstimation.cpp:680

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r13 zmm0-zmm7]
        
    Routine temporaries
        Total         :      78
            Global    :      30
            Local     :      48
        Regenerable   :       3
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [2.70e+00 ~ 0.2%]
            Writes    :       3 [2.70e+00 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: resCalc(float *, float *, float *, float *, float *, float, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (resCalc(float *, float *, float *, float *, float *, float, int, int)) [39/83=47.0%] cuda_dpposeEstimation.cpp(700,1)
  -> INLINE: (713,13) febNorm_diff(float *, float *, int, int) (isz = 54) (sz = 67)
  -> INLINE: (713,40) febNorm(float *, int, int) (isz = 43) (sz = 54)
  -> INLINE: (714,18) febNorm_diff(float *, float *, int, int) (isz = 54) (sz = 67)
  -> INLINE: (714,46) febNorm(float *, int, int) (isz = 43) (sz = 54)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(668,9) inlined into cuda_dpposeEstimation.cpp(713,13)
   remark #25045: Fused Loops: ( 668 683 )

   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(670,17) inlined into cuda_dpposeEstimation.cpp(713,13)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(670,17) inlined into cuda_dpposeEstimation.cpp(713,13)
      remark #25045: Fused Loops: ( 670 685 )

      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference M[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,26) ]
      remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,41) ]
      remark #15389: vectorization support: reference M[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,58) ]
      remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,73) ]
      remark #15389: vectorization support: reference ZO[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(687,26) ]
      remark #15389: vectorization support: reference ZO[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(687,43) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.400
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 22 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 6.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(685,17) inlined into cuda_dpposeEstimation.cpp(713,40)
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(670,17) inlined into cuda_dpposeEstimation.cpp(713,13)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference M[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,26) ]
      remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,41) ]
      remark #15389: vectorization support: reference M[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,58) ]
      remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,73) ]
      remark #15389: vectorization support: reference ZO[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(687,26) ]
      remark #15389: vectorization support: reference ZO[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(687,43) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 3.286
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(670,17) inlined into cuda_dpposeEstimation.cpp(713,13)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(683,9) inlined into cuda_dpposeEstimation.cpp(713,40)
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(668,9) inlined into cuda_dpposeEstimation.cpp(714,18)
   remark #25045: Fused Loops: ( 668 683 )

   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(670,17) inlined into cuda_dpposeEstimation.cpp(714,18)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(670,17) inlined into cuda_dpposeEstimation.cpp(714,18)
      remark #25045: Fused Loops: ( 670 685 )

      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,26) ]
      remark #15389: vectorization support: reference ZO[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,41) ]
      remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,58) ]
      remark #15389: vectorization support: reference ZO[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,73) ]
      remark #15389: vectorization support: reference ZO[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(687,26) ]
      remark #15389: vectorization support: reference ZO[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(687,43) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.342
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 22 
      remark #15477: vector cost: 2.370 
      remark #15478: estimated potential speedup: 6.860 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(685,17) inlined into cuda_dpposeEstimation.cpp(714,46)
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(670,17) inlined into cuda_dpposeEstimation.cpp(714,18)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,26) ]
      remark #15389: vectorization support: reference ZO[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,41) ]
      remark #15389: vectorization support: reference Z[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,58) ]
      remark #15389: vectorization support: reference ZO[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(672,73) ]
      remark #15389: vectorization support: reference ZO[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(687,26) ]
      remark #15389: vectorization support: reference ZO[i*row1+j] has unaligned access   [ cuda_dpposeEstimation.cpp(687,43) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 3.300
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(670,17) inlined into cuda_dpposeEstimation.cpp(714,18)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(683,9) inlined into cuda_dpposeEstimation.cpp(714,46)
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(700,1):remark #34051: REGISTER ALLOCATION : [_Z7resCalcPfS_S_S_S_fii] cuda_dpposeEstimation.cpp:700

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     248
            Global    :      69
            Local     :     179
        Regenerable   :       7
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       4 [4.89e+00 ~ 0.1%]
            Writes    :       7 [1.13e+01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::ios_base::precision(std::ios_base *, std::streamsize)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::ios_base::precision(std::ios_base *, std::streamsize)) /usr/include/c++/5/bits/ios_base.h(699,5)

===========================================================================

Begin optimization report for: std::ctype<char>::widen(const std::ctype<char> *, char) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::ctype<char>::widen(const std::ctype<char> *, char) const) /usr/include/c++/5/bits/locale_facets.h(873,7)

===========================================================================

Begin optimization report for: std::chrono::duration<int64_t, std::nano>::count(const std::chrono::duration<int64_t, std::nano> *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::duration<int64_t, std::nano>::count(const std::chrono::duration<int64_t, std::nano> *) const) /usr/include/c++/5/chrono(279,2)

===========================================================================

Begin optimization report for: std::chrono::duration<int64_t, std::nano>::duration<std::chrono::duration<int64_t, std::nano>::rep, void>(std::chrono::duration<int64_t, std::nano> *, const std::chrono::duration<int64_t, std::nano>::rep &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::duration<int64_t, std::nano>::duration<std::chrono::duration<int64_t, std::nano>::rep, void>(std::chrono::duration<int64_t, std::nano> *, const std::chrono::duration<int64_t, std::nano>::rep &)) /usr/include/c++/5/chrono(264,35)

===========================================================================

Begin optimization report for: std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration>::time_since_epoch(const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration>::time_since_epoch(const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> *) const) /usr/include/c++/5/chrono(569,2)

===========================================================================

Begin optimization report for: std::chrono::duration<float, std::ratio<1L, 1L>>::count(const std::chrono::duration<float, std::ratio<1L, 1L>> *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::duration<float, std::ratio<1L, 1L>>::count(const std::chrono::duration<float, std::ratio<1L, 1L>> *) const) /usr/include/c++/5/chrono(279,2)

===========================================================================

Begin optimization report for: std::chrono::duration<float, std::ratio<1L, 1L>>::operator+=(std::chrono::duration<float, std::ratio<1L, 1L>> *, const std::chrono::duration<float, std::ratio<1L, 1L>> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::duration<float, std::ratio<1L, 1L>>::operator+=(std::chrono::duration<float, std::ratio<1L, 1L>> *, const std::chrono::duration<float, std::ratio<1L, 1L>> &)) /usr/include/c++/5/chrono(314,2)

===========================================================================

Begin optimization report for: std::chrono::duration<float, std::ratio<1L, 1L>>::duration<std::chrono::duration<float, std::ratio<1L, 1L>>::rep, void>(std::chrono::duration<float, std::ratio<1L, 1L>> *, const std::chrono::duration<float, std::ratio<1L, 1L>>::rep &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::duration<float, std::ratio<1L, 1L>>::duration<std::chrono::duration<float, std::ratio<1L, 1L>>::rep, void>(std::chrono::duration<float, std::ratio<1L, 1L>> *, const std::chrono::duration<float, std::ratio<1L, 1L>>::rep &)) /usr/include/c++/5/chrono(264,35)

===========================================================================

Begin optimization report for: std::chrono::__duration_cast_impl<std::chrono::duration<float, std::ratio<1L, 1L>>, std::ratio_divide<std::nano, std::chrono::duration<int64_t, std::ratio<1L, 1L>>::period>, std::__success_type<float>::type, true, false>::__cast<int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::__duration_cast_impl<std::chrono::duration<float, std::ratio<1L, 1L>>, std::ratio_divide<std::nano, std::chrono::duration<int64_t, std::ratio<1L, 1L>>::period>, std::__success_type<float>::type, true, false>::__cast<int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &)) /usr/include/c++/5/chrono(160,4)

===========================================================================

Begin optimization report for: std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration, std::chrono::_V2::system_clock::duration>(const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> &, const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration, std::chrono::_V2::system_clock::duration>(const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> &, const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> &)) /usr/include/c++/5/chrono(652,7)

===========================================================================

Begin optimization report for: std::chrono::operator-<int64_t, std::nano, int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &, const std::chrono::duration<int64_t, std::nano> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::operator-<int64_t, std::nano, int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &, const std::chrono::duration<int64_t, std::nano> &)) /usr/include/c++/5/chrono(395,7)

===========================================================================

Begin optimization report for: std::chrono::duration_cast<std::chrono::duration<float, std::ratio<1L, 1L>>, int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (std::chrono::duration_cast<std::chrono::duration<float, std::ratio<1L, 1L>>, int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &)) [76/83=91.6%] /usr/include/c++/5/chrono(195,7)
  -> INLINE (MANUAL): (203,22) std::chrono::__duration_cast_impl<std::chrono::duration<float, std::ratio<1L, 1L>>, std::ratio_divide<std::nano, std::chrono::duration<int64_t, std::ratio<1L, 1L>>::period>, std::__success_type<float>::type, true, false>::__cast<int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &) (isz = 9) (sz = 16)
    -> INLINE (MANUAL): (162,20) std::chrono::duration<float, std::ratio<1L, 1L>>::duration<std::chrono::duration<float, std::ratio<1L, 1L>>::rep, void>(std::chrono::duration<float, std::ratio<1L, 1L>> *, const std::chrono::duration<float, std::ratio<1L, 1L>>::rep &) (isz = 0) (sz = 7)
    -> INLINE (MANUAL): (163,29) std::chrono::duration<int64_t, std::nano>::count(const std::chrono::duration<int64_t, std::nano> *) const (isz = 0) (sz = 6)


    Report from: Code generation optimizations [cg]

/usr/include/c++/5/chrono(195,7):remark #34051: REGISTER ALLOCATION : [_ZNSt6chrono13duration_castINS_8durationIfSt5ratioILl1ELl1EEEElS2_ILl1ELl1000000000EEEENSt9enable_ifIXsr3std6chrono13__is_durationIT_EE5valueES7_E4typeERKNS1_IT0_T1_EE] /usr/include/c++/5/chrono:195

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rdi zmm0]
        
    Routine temporaries
        Total         :      11
            Global    :       0
            Local     :      11
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::operator|(std::_Ios_Openmode, std::_Ios_Openmode)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::operator|(std::_Ios_Openmode, std::_Ios_Openmode)) /usr/include/c++/5/bits/ios_base.h(130,3)

===========================================================================

Begin optimization report for: std::operator&(std::_Ios_Iostate, std::_Ios_Iostate)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::operator&(std::_Ios_Iostate, std::_Ios_Iostate)) /usr/include/c++/5/bits/ios_base.h(166,3)

===========================================================================

Begin optimization report for: std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)) /usr/include/c++/5/bits/ios_base.h(170,3)

===========================================================================

Begin optimization report for: std::__check_facet<std::basic_ios<char, std::char_traits<char>>::__ctype_type>(const std::basic_ios<char, std::char_traits<char>>::__ctype_type *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::__check_facet<std::basic_ios<char, std::char_traits<char>>::__ctype_type>(const std::basic_ios<char, std::char_traits<char>>::__ctype_type *)) /usr/include/c++/5/bits/basic_ios.h(48,5)

===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [83/83=100.0%] <compiler generated>
  -> EXTERN: /usr/include/c++/5/iostream:(74,25) __cxa_atexit()
  -> EXTERN: /usr/include/c++/5/iostream:(74,25) std::ios_base::Init::Init(std::ios_base::Init *)


    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       7
            Local     :       6
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The routine declaration is annotated with "__attribute__((noinline))".  
    Remove this annotation to permit the compiler to inline this routine.

<2> The compiler's heuristics predict that it is not profitable to inline the
    call.  Add "inline __attribute__((always_inline))" to the declaration of
    the called function or add "#pragma forceinline" before the call site.

<3> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

