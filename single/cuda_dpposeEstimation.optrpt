Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.4.196 Build 20170411

Compiler options: -qopenmp -qopt-report=3 -xHost -align -O3 -g -mkl=parallel -heap-arrays -parallel -std=c++11 -c -lm

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (std::char_traits<char>::length(const std::char_traits<char>::char_type *)) [2] /usr/include/c++/5/bits/char_traits.h(267,7)
  -> EXTERN: (267,16) __builtin_strlen(const char *)


    Report from: Code generation optimizations [cg]

/usr/include/c++/5/bits/char_traits.h(267,7):remark #34051: REGISTER ALLOCATION : [_ZNSt11char_traitsIcE6lengthEPKc] /usr/include/c++/5/bits/char_traits.h:267

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       7
            Local     :       5
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: prox_2norm(float *, float *, float *, float, int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (prox_2norm(float *, float *, float *, float, int, int, int)) [6] cuda_dpposeEstimation.cpp(464,1)
  -> EXTERN: (466,31) operator new[](std::size_t)
  -> EXTERN: (466,31) __cxa_throw_bad_array_new_length()
  -> EXTERN: (480,1) omp_set_num_threads(int)
  -> EXTERN: (485,15) operator new[](std::size_t)
  -> EXTERN: (486,15) operator new[](std::size_t)
  -> EXTERN: (487,11) operator new[](std::size_t)
  -> EXTERN: (488,12) operator new[](std::size_t)
  -> EXTERN: (490,16) operator new[](std::size_t)
  -> EXTERN: (491,13) operator new[](std::size_t)
  -> EXTERN: (492,16) operator new[](std::size_t)
  -> EXTERN: (493,16) operator new[](std::size_t)
  -> EXTERN: (499,10) LAPACKE_sgesvd(int, char, char, int, int, float *, int, float *, float *, int, float *, int, float *)
  -> (503,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (503,61) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (544,3) cpuMatrixMult(float *, float *, float *, int, int, int)
  -> INLINE: (545,3) cpuMatrixMult(float *, float *, float *, int, int, int)
  -> EXTERN: (557,2) operator delete[](void *)
  -> EXTERN: (558,2) operator delete[](void *)
  -> EXTERN: (559,2) operator delete[](void *)
  -> EXTERN: (560,2) operator delete[](void *)
  -> EXTERN: (561,2) operator delete[](void *)
  -> EXTERN: (562,2) operator delete[](void *)
  -> EXTERN: (563,2) operator delete[](void *)
  -> EXTERN: (564,2) operator delete[](void *)
  -> EXTERN: (569,2) operator delete[](void *)


    Report from: OpenMP optimizations [openmp]

cuda_dpposeEstimation.cpp(481:1-481:1):OMP:_Z10prox_2normPfS_S_fiii:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(472,3)
   remark #25444: Loopnest Interchanged: ( 1 2 3 ) --> ( 2 1 3 )
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override    [ cuda_dpposeEstimation.cpp(472,3) ]
   remark #15452: unmasked strided loads: 1    [ cuda_dpposeEstimation.cpp(472,3) ]
   remark #15453: unmasked strided stores: 1    [ cuda_dpposeEstimation.cpp(472,3) ]
   remark #15475: --- begin vector cost summary ---   [ cuda_dpposeEstimation.cpp(472,3) ]
   remark #15476: scalar cost: 5    [ cuda_dpposeEstimation.cpp(472,3) ]
   remark #15477: vector cost: 7.500    [ cuda_dpposeEstimation.cpp(472,3) ]
   remark #15478: estimated potential speedup: 0.660    [ cuda_dpposeEstimation.cpp(472,3) ]
   remark #15488: --- end vector cost summary ---   [ cuda_dpposeEstimation.cpp(472,3) ]
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(470,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15315: loop was not vectorized: estimated number of iterations (2) is insufficient for vectorization
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #25015: Estimate of max trip count of loop=2

      LOOP BEGIN at cuda_dpposeEstimation.cpp(474,4)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 4.000 
         remark #15478: estimated potential speedup: 0.780 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 3  
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(482,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(495,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 1.250 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(523,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 5.500 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 2  

      LOOP BEGIN at cuda_dpposeEstimation.cpp(525,4)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 4.000 
         remark #15478: estimated potential speedup: 0.780 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 3  
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(525,4)
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(530,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15456: masked unaligned unit stride loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 13 
      remark #15477: vector cost: 42.000 
      remark #15478: estimated potential speedup: 0.290 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 2  

      LOOP BEGIN at cuda_dpposeEstimation.cpp(532,4)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 13 
         remark #15477: vector cost: 15.500 
         remark #15478: estimated potential speedup: 0.560 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 2  
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(532,4)
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(544,3)
      remark #25461: Imperfect Loop Unroll-Jammed by 2   (pre-vector) 
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 27 
      remark #15477: vector cost: 19.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 2  

      LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(544,3)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 4.500 
         remark #15478: estimated potential speedup: 0.640 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 2  
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(544,3)
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(544,3)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 4.500 
         remark #15478: estimated potential speedup: 0.640 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 2  
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(217,2) inlined into cuda_dpposeEstimation.cpp(545,3)
      remark #25101: Loop Interchange not done due to: Original Order seems proper
      remark #25452: Original Order found to be proper, but by a close margin
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 14 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 1.030 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 2  

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(545,3)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 14 
         remark #15477: vector cost: 9.500 
         remark #15478: estimated potential speedup: 0.910 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 3  

         LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(545,3)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15452: unmasked strided loads: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 8 
            remark #15477: vector cost: 4.500 
            remark #15478: estimated potential speedup: 0.640 
            remark #15488: --- end vector cost summary ---
            remark #25436: completely unrolled by 2  
         LOOP END

         LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(545,3)
         LOOP END

         LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(545,3)
         LOOP END
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(545,3)

         LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(545,3)
         LOOP END

         LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(545,3)
         LOOP END

         LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(545,3)
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(546,3)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between M[i*3+j*col+k] (550:25) and M[i*3+j*col+k] (550:25)
      remark #25436: completely unrolled by 2  

      LOOP BEGIN at cuda_dpposeEstimation.cpp(548,25)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 4.000 
         remark #15478: estimated potential speedup: 0.780 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 3  
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(548,25)
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(495,3)
   <Remainder loop for vectorization>
      remark #25436: completely unrolled by 2  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(464,1):remark #34051: REGISTER ALLOCATION : [_Z10prox_2normPfS_S_fiii] cuda_dpposeEstimation.cpp:464

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     273
            Global    :      74
            Local     :     199
        Regenerable   :      88
        Spilled       :      22
        
    Routine stack
        Variables     :      84 bytes*
            Reads     :       7 [2.80e+00 ~ 0.2%]
            Writes    :      16 [3.14e+01 ~ 2.6%]
        Spills        :     216 bytes*
            Reads     :      43 [1.47e+02 ~ 12.4%]
            Writes    :      35 [6.21e+01 ~ 5.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calculateZ(float *, float *, float *, float *, float *, float *, float, float *, float *, int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calculateZ(float *, float *, float *, float *, float *, float *, float, float *, float *, int, int, int)) [8] cuda_dpposeEstimation.cpp(344,1)
  -> EXTERN: (345,31) operator new[](std::size_t)
  -> EXTERN: (345,31) __cxa_throw_bad_array_new_length()
  -> EXTERN: (346,32) operator new[](std::size_t)
  -> EXTERN: (346,32) __cxa_throw_bad_array_new_length()
  -> EXTERN: (347,32) operator new[](std::size_t)
  -> EXTERN: (347,32) __cxa_throw_bad_array_new_length()
  -> EXTERN: (348,31) operator new[](std::size_t)
  -> EXTERN: (348,31) __cxa_throw_bad_array_new_length()
  -> EXTERN: (349,32) operator new[](std::size_t)
  -> EXTERN: (349,32) __cxa_throw_bad_array_new_length()
  -> EXTERN: (350,35) operator new[](std::size_t)
  -> EXTERN: (350,35) __cxa_throw_bad_array_new_length()
  -> INLINE: (367,2) cpuMatrixMult(float *, float *, float *, int, int, int)
  -> INLINE: (370,2) scalarToMatrixMultiply(float *, float *, float, int, int)
  -> INLINE: (373,2) sumOfMatrix(float *, float *, float *, float *, int, int)
  -> INLINE: (376,2) addScalarToDiagonal(float *, float *, float, int, int)
  -> EXTERN: (378,8) std::chrono::_V2::system_clock::now()
  -> INLINE: (381,11) matInv(float *, int)
    -> EXTERN: (327,6) _vla_alloc(long)
    -> EXTERN: (327,6) _vla_free(void *, long)
    -> EXTERN: (330,8) LAPACKE_sgetrf(int, int, int, float *, int, int *)
    -> EXTERN: (333,10) _vla_free(void *, long)
    -> EXTERN: (336,8) LAPACKE_sgetri(int, int, float *, int, const int *)
    -> EXTERN: (338,9) _vla_free(void *, long)
  -> EXTERN: (382,8) std::chrono::_V2::system_clock::now()
  -> INLINE (MANUAL): (383,69) std::chrono::duration_cast<std::chrono::duration<double, std::ratio<1L, 1L>>, int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &)
    -> INLINE (MANUAL): /usr/include/c++/5/chrono:(203,22) std::chrono::__duration_cast_impl<std::chrono::duration<double, std::ratio<1L, 1L>>, std::ratio_divide<std::nano, std::chrono::duration<int64_t, std::ratio<1L, 1L>>::period>, std::__success_type<double>::type, true, false>::__cast<int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &)
      -> INLINE (MANUAL): (162,20) std::chrono::duration<double, std::ratio<1L, 1L>>::duration<std::chrono::duration<double, std::ratio<1L, 1L>>::rep, void>(std::chrono::duration<double, std::ratio<1L, 1L>> *, const std::chrono::duration<double, std::ratio<1L, 1L>>::rep &)
      -> INLINE (MANUAL): (163,29) std::chrono::duration<int64_t, std::nano>::count(const std::chrono::duration<int64_t, std::nano> *) const
  -> INLINE (MANUAL): (383,69) std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration, std::chrono::_V2::system_clock::duration>(const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> &, const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> &)
    -> INLINE (MANUAL): /usr/include/c++/5/chrono:(652,16) std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration>::time_since_epoch(const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> *) const
    -> INLINE (MANUAL): /usr/include/c++/5/chrono:(652,43) std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration>::time_since_epoch(const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> *) const
    -> INLINE (MANUAL): /usr/include/c++/5/chrono:(652,43) std::chrono::operator-<int64_t, std::nano, int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &, const std::chrono::duration<int64_t, std::nano> &)
      -> INLINE (MANUAL): (399,14) std::chrono::duration<int64_t, std::nano>::duration<std::chrono::duration<int64_t, std::nano>::rep, void>(std::chrono::duration<int64_t, std::nano> *, const std::chrono::duration<int64_t, std::nano>::rep &)
      -> INLINE (MANUAL): (399,26) std::chrono::duration<int64_t, std::nano>::count(const std::chrono::duration<int64_t, std::nano> *) const
      -> INLINE (MANUAL): (399,48) std::chrono::duration<int64_t, std::nano>::count(const std::chrono::duration<int64_t, std::nano> *) const
  -> (384,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (384,35) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double)
  -> INLINE (MANUAL): (384,48) std::chrono::duration<double, std::ratio<1L, 1L>>::count(const std::chrono::duration<double, std::ratio<1L, 1L>> *) const
  -> (384,63) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (384,72) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (390,9) cpuMatrixMult(float *, float *, float *, int, int, int)
  -> EXTERN: (392,2) operator delete[](void *)
  -> EXTERN: (393,2) operator delete[](void *)
  -> EXTERN: (394,2) operator delete[](void *)
  -> EXTERN: (395,2) operator delete[](void *)
  -> EXTERN: (396,2) operator delete[](void *)
  -> EXTERN: (397,2) operator delete[](void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(356,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(358,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(358,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 1.120 
      remark #15478: estimated potential speedup: 6.970 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(358,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(358,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(217,2) inlined into cuda_dpposeEstimation.cpp(367,2)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(367,2)
   <Distributed chunk1>
      remark #25087: Preprocess Loopnests: Sinking 1 Stmts Into Inner LOOP to Create Perfect Nest 
      remark #25426: Loop Distributed (2 way) 
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(367,2)
      <Distributed chunk1>
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.620 
         remark #15478: estimated potential speedup: 5.330 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(367,2)
      <Remainder loop for vectorization, Distributed chunk1>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(217,2) inlined into cuda_dpposeEstimation.cpp(367,2)
<Distributed chunk2>
   remark #25444: Loopnest Interchanged: ( 1 2 3 ) --> ( 1 3 2 )
   remark #25229: Loop multiversioned for Trip-count
   remark #25459: Loopnest replaced by matmul intrinsic
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(217,2) inlined into cuda_dpposeEstimation.cpp(367,2)
<Distributed chunk2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #25440: unrolled and jammed by 4   (pre-vector) 
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(367,2)
   <Distributed chunk2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #25440: unrolled and jammed by 4   (pre-vector) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(367,2)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(367,2)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 8 
         remark #15451: unmasked unaligned unit stride stores: 16 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 168 
         remark #15477: vector cost: 17.870 
         remark #15478: estimated potential speedup: 6.950 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(367,2)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(367,2)
   <Remainder, Distributed chunk2>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(367,2)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(367,2)
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 5 
         remark #15451: unmasked unaligned unit stride stores: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 42 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 6.350 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(367,2)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(217,2) inlined into cuda_dpposeEstimation.cpp(367,2)
<Remainder, Distributed chunk2>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(367,2)
   <Distributed chunk2>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(367,2)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(367,2)
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 11 
         remark #15477: vector cost: 1.000 
         remark #15478: estimated potential speedup: 7.600 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(367,2)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(234,2) inlined into cuda_dpposeEstimation.cpp(370,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(236,3) inlined into cuda_dpposeEstimation.cpp(370,2)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(236,3) inlined into cuda_dpposeEstimation.cpp(370,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 6.680 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(236,3) inlined into cuda_dpposeEstimation.cpp(370,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(236,3) inlined into cuda_dpposeEstimation.cpp(370,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(245,2) inlined into cuda_dpposeEstimation.cpp(373,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(247,3) inlined into cuda_dpposeEstimation.cpp(373,2)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(247,3) inlined into cuda_dpposeEstimation.cpp(373,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 6.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(247,3) inlined into cuda_dpposeEstimation.cpp(373,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(247,3) inlined into cuda_dpposeEstimation.cpp(373,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(256,2) inlined into cuda_dpposeEstimation.cpp(376,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(258,3) inlined into cuda_dpposeEstimation.cpp(376,2)
   <Peeled loop for vectorization, Predicate Optimized v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(258,3) inlined into cuda_dpposeEstimation.cpp(376,2)
   <Predicate Optimized v1>
      remark #25423: Condition at line 260 hoisted out of this loop
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 0.500 
      remark #15478: estimated potential speedup: 8.710 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(258,3) inlined into cuda_dpposeEstimation.cpp(376,2)
   <Remainder loop for vectorization, Predicate Optimized v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(258,3) inlined into cuda_dpposeEstimation.cpp(376,2)
   <Peeled loop for vectorization, Predicate Optimized v2>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(258,3) inlined into cuda_dpposeEstimation.cpp(376,2)
   <Predicate Optimized v2>
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 0.500 
      remark #15478: estimated potential speedup: 8.710 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(258,3) inlined into cuda_dpposeEstimation.cpp(376,2)
   <Remainder loop for vectorization, Predicate Optimized v2>
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(217,2) inlined into cuda_dpposeEstimation.cpp(390,9)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(390,9)
   <Distributed chunk1>
      remark #25087: Preprocess Loopnests: Sinking 1 Stmts Into Inner LOOP to Create Perfect Nest 
      remark #25426: Loop Distributed (2 way) 
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(390,9)
      <Distributed chunk1>
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.620 
         remark #15478: estimated potential speedup: 5.330 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(390,9)
      <Remainder loop for vectorization, Distributed chunk1>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(217,2) inlined into cuda_dpposeEstimation.cpp(390,9)
<Distributed chunk2>
   remark #25444: Loopnest Interchanged: ( 1 2 3 ) --> ( 1 3 2 )
   remark #25229: Loop multiversioned for Trip-count
   remark #25459: Loopnest replaced by matmul intrinsic
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(217,2) inlined into cuda_dpposeEstimation.cpp(390,9)
<Distributed chunk2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #25440: unrolled and jammed by 4   (pre-vector) 
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(390,9)
   <Distributed chunk2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #25440: unrolled and jammed by 4   (pre-vector) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(390,9)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(390,9)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 8 
         remark #15451: unmasked unaligned unit stride stores: 16 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 168 
         remark #15477: vector cost: 17.870 
         remark #15478: estimated potential speedup: 6.950 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(390,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(390,9)
   <Remainder, Distributed chunk2>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(390,9)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(390,9)
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 5 
         remark #15451: unmasked unaligned unit stride stores: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 42 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 6.350 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(390,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(217,2) inlined into cuda_dpposeEstimation.cpp(390,9)
<Remainder, Distributed chunk2>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(390,9)
   <Distributed chunk2>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(390,9)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(390,9)
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 11 
         remark #15477: vector cost: 1.000 
         remark #15478: estimated potential speedup: 7.600 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(390,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(352,42):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
cuda_dpposeEstimation.cpp(352,45):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
cuda_dpposeEstimation.cpp(221,3):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(221,3):remark #34026: call to memset implemented as a call to optimized library version
cuda_dpposeEstimation.cpp(221,3):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(221,3):remark #34026: call to memset implemented as a call to optimized library version
cuda_dpposeEstimation.cpp(344,1):remark #34051: REGISTER ALLOCATION : [_Z10calculateZPfS_S_S_S_S_fS_S_iii] cuda_dpposeEstimation.cpp:344

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   29[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    1233
            Global    :     445
            Local     :     788
        Regenerable   :      53
        Spilled       :     127
        
    Routine stack
        Variables     :     600 bytes*
            Reads     :       2 [1.00e+00 ~ 0.0%]
            Writes    :      77 [3.64e+01 ~ 0.1%]
        Spills        :    1128 bytes*
            Reads     :     321 [3.68e+03 ~ 6.8%]
            Writes    :     155 [8.70e+02 ~ 1.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: mean_of_std_deviation(float *, int, int, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (mean_of_std_deviation(float *, int, int, float *)) [9] cuda_dpposeEstimation.cpp(117,1)
  -> EXTERN: (125,11) pow(double, double)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(120,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(123,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(123,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 15 
      remark #15477: vector cost: 3.250 
      remark #15478: estimated potential speedup: 3.890 
      remark #15487: type converts: 3 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(123,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(117,1):remark #34051: REGISTER ALLOCATION : [_Z21mean_of_std_deviationPfiiS_] cuda_dpposeEstimation.cpp:117

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   28[ rax rdx rcx rbx rsi rdi r8-r13 r15 zmm0-zmm14]
        
    Routine temporaries
        Total         :      85
            Global    :      31
            Local     :      54
        Regenerable   :       4
        Spilled       :       4
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [2.00e+00 ~ 0.4%]
            Writes    :       1 [1.80e+00 ~ 0.3%]
        Spills        :      32 bytes*
            Reads     :       4 [3.60e+00 ~ 0.7%]
            Writes    :       4 [3.60e+00 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::operator&..0(std::_Ios_Iostate, std::_Ios_Iostate)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (std::operator&..0(std::_Ios_Iostate, std::_Ios_Iostate)) [12] /usr/include/c++/5/bits/ios_base.h(166,3)
  CLONED FROM: std::operator&(std::_Ios_Iostate, std::_Ios_Iostate)(X,2)


    Report from: Code generation optimizations [cg]

/usr/include/c++/5/bits/ios_base.h(166,3):remark #34051: REGISTER ALLOCATION : [_ZStanSt12_Ios_IostateS_..0] /usr/include/c++/5/bits/ios_base.h:166

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       0
            Local     :      11
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: readValues(char *, float *, int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (readValues(char *, float *, int, int, int)) [14] cuda_dpposeEstimation.cpp(30,1)
  -> INLINE (MANUAL): (32,11) std::basic_ifstream<char, std::char_traits<char>>::~basic_ifstream(std::basic_ifstream<char, std::char_traits<char>> *const)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(533,7) std::basic_ifstream<char, std::char_traits<char>>::~basic_ifstream(std::basic_ifstream<char, std::char_traits<char>> *, const long *const *)
      -> INLINE (MANUAL): (534,9) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const)
        -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *)
          -> EXTERN: (282,20) __cxa_call_unexpected
          -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (534,9) std::basic_istream<char, std::char_traits<char>>::~basic_istream(std::basic_istream<char, std::char_traits<char>> *, const long *const *)
        -> INLINE (MANUAL): /usr/include/c++/5/istream:(104,36) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (534,9) std::basic_filebuf<char, std::char_traits<char>>::~basic_filebuf(std::basic_filebuf<char, std::char_traits<char>> *)
        -> EXTERN: (239,7) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
        -> EXTERN: (239,7) __cxa_call_unexpected
        -> EXTERN: (239,15) std::basic_filebuf<char, std::char_traits<char>>::close(std::basic_filebuf<char, std::char_traits<char>> *)
        -> EXTERN: (239,24) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,24) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
  -> INLINE (MANUAL): (32,11) std::basic_ifstream<char, std::char_traits<char>>::basic_ifstream(std::basic_ifstream<char, std::char_traits<char>> *const)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(481,7) std::basic_ifstream<char, std::char_traits<char>>::basic_ifstream(std::basic_ifstream<char, std::char_traits<char>> *, const long *const *)
      -> INLINE (MANUAL): (481,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const)
        -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *)
          -> EXTERN: (282,20) __cxa_call_unexpected
          -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (481,7) std::basic_filebuf<char, std::char_traits<char>>::~basic_filebuf(std::basic_filebuf<char, std::char_traits<char>> *)
        -> EXTERN: (239,7) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
        -> EXTERN: (239,7) __cxa_call_unexpected
        -> EXTERN: (239,15) std::basic_filebuf<char, std::char_traits<char>>::close(std::basic_filebuf<char, std::char_traits<char>> *)
        -> EXTERN: (239,24) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,24) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
      -> INLINE (MANUAL): (481,7) std::basic_istream<char, std::char_traits<char>>::~basic_istream(std::basic_istream<char, std::char_traits<char>> *, const long *const *)
        -> INLINE (MANUAL): /usr/include/c++/5/istream:(104,36) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> EXTERN: (481,7) std::basic_filebuf<char, std::char_traits<char>>::basic_filebuf(std::basic_filebuf<char, std::char_traits<char>> *)
      -> INLINE (MANUAL): (481,7) std::basic_istream<char, std::char_traits<char>>::basic_istream(std::basic_istream<char, std::char_traits<char>> *, const long *const *)
        -> INLINE (MANUAL): /usr/include/c++/5/istream:(606,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(460,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *)
            -> EXTERN: (460,7) std::ios_base::ios_base(std::ios_base *const)
        -> INLINE (MANUAL): /usr/include/c++/5/istream:(606,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
        -> EXTERN: /usr/include/c++/5/istream:(608,15) std::basic_ios<char, std::char_traits<char>>::init(std::basic_ios<char, std::char_traits<char>> *, std::basic_streambuf<char, std::char_traits<char>> *)
      -> INLINE (MANUAL): (481,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *const)
        -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(460,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *)
          -> EXTERN: (460,7) std::ios_base::ios_base(std::ios_base *const)
      -> EXTERN: (482,15) std::basic_ios<char, std::char_traits<char>>::init(std::basic_ios<char, std::char_traits<char>> *, std::basic_streambuf<char, std::char_traits<char>> *)
  -> INLINE (MANUAL): (33,13) std::basic_ifstream<char, std::char_traits<char>>::open(std::basic_ifstream<char, std::char_traits<char>> *, const char *, std::ios_base::openmode)
    -> EXTERN: /usr/include/c++/5/fstream:(597,18) std::basic_filebuf<char, std::char_traits<char>>::open(std::basic_filebuf<char, std::char_traits<char>> *, const char *, std::ios_base::openmode)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(597,35) std::operator|(std::_Ios_Openmode, std::_Ios_Openmode)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(598,10) std::basic_ios<char, std::char_traits<char>>::setstate(std::basic_ios<char, std::char_traits<char>> *, std::ios_base::iostate)
      -> EXTERN: /usr/include/c++/5/bits/basic_ios.h:(158,15) std::basic_ios<char, std::char_traits<char>>::clear(std::basic_ios<char, std::char_traits<char>> *, std::ios_base::iostate)
      -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(158,27) std::basic_ios<char, std::char_traits<char>>::rdstate(const std::basic_ios<char, std::char_traits<char>> *) const
      -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(158,37) std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)
    -> EXTERN: /usr/include/c++/5/fstream:(602,10) std::basic_ios<char, std::char_traits<char>>::clear(std::basic_ios<char, std::char_traits<char>> *, std::ios_base::iostate)
  -> INLINE (MANUAL): (34,17) std::basic_ifstream<char, std::char_traits<char>>::is_open(std::basic_ifstream<char, std::char_traits<char>> *)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(575,27) std::basic_filebuf<char, std::char_traits<char>>::is_open(const std::basic_filebuf<char, std::char_traits<char>> *) const
      -> EXTERN: (253,24) std::__basic_file<char>::is_open(const std::__basic_file<char> *) const
  -> (36,22) std::basic_ios<char, std::char_traits<char>>::eof(const std::basic_ios<char, std::char_traits<char>> *) const
  -> (36,22) std::basic_ios<char, std::char_traits<char>>::eof(const std::basic_ios<char, std::char_traits<char>> *) const
  -> (40,16) std::basic_istream<char, std::char_traits<char>>::operator>>(std::basic_istream<char, std::char_traits<char>> *, float &)
  -> INLINE (MANUAL): (50,15) std::basic_ifstream<char, std::char_traits<char>>::close(std::basic_ifstream<char, std::char_traits<char>> *)
    -> EXTERN: /usr/include/c++/5/fstream:(635,18) std::basic_filebuf<char, std::char_traits<char>>::close(std::basic_filebuf<char, std::char_traits<char>> *)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(636,10) std::basic_ios<char, std::char_traits<char>>::setstate(std::basic_ios<char, std::char_traits<char>> *, std::ios_base::iostate)
      -> EXTERN: /usr/include/c++/5/bits/basic_ios.h:(158,15) std::basic_ios<char, std::char_traits<char>>::clear(std::basic_ios<char, std::char_traits<char>> *, std::ios_base::iostate)
      -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(158,27) std::basic_ios<char, std::char_traits<char>>::rdstate(const std::basic_ios<char, std::char_traits<char>> *) const
      -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(158,37) std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)
  -> INLINE (MANUAL): (51,2) std::basic_ifstream<char, std::char_traits<char>>::~basic_ifstream(std::basic_ifstream<char, std::char_traits<char>> *const)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(533,7) std::basic_ifstream<char, std::char_traits<char>>::~basic_ifstream(std::basic_ifstream<char, std::char_traits<char>> *, const long *const *)
      -> INLINE (MANUAL): (534,9) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const)
        -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *)
          -> EXTERN: (282,20) __cxa_call_unexpected
          -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (534,9) std::basic_istream<char, std::char_traits<char>>::~basic_istream(std::basic_istream<char, std::char_traits<char>> *, const long *const *)
        -> INLINE (MANUAL): /usr/include/c++/5/istream:(104,36) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (534,9) std::basic_filebuf<char, std::char_traits<char>>::~basic_filebuf(std::basic_filebuf<char, std::char_traits<char>> *)
        -> EXTERN: (239,7) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
        -> EXTERN: (239,7) __cxa_call_unexpected
        -> EXTERN: (239,15) std::basic_filebuf<char, std::char_traits<char>>::close(std::basic_filebuf<char, std::char_traits<char>> *)
        -> EXTERN: (239,24) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,24) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(36,3)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(30,1):remark #34051: REGISTER ALLOCATION : [_Z10readValuesPcPfiii] cuda_dpposeEstimation.cpp:30

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :     211
            Global    :      27
            Local     :     184
        Regenerable   :      68
        Spilled       :       8
        
    Routine stack
        Variables     :     548 bytes*
            Reads     :      22 [5.63e+00 ~ 5.2%]
            Writes    :      49 [2.04e+01 ~ 18.9%]
        Spills        :      16 bytes*
            Reads     :       2 [1.45e+00 ~ 1.3%]
            Writes    :       2 [4.40e-01 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: febNorm_diff(float *, float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (febNorm_diff(float *, float *, int, int)) [15] cuda_dpposeEstimation.cpp(584,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(587,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(589,17)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(589,17)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 14 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 6.850 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(589,17)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(589,17)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(584,1):remark #34051: REGISTER ALLOCATION : [_Z12febNorm_diffPfS_ii] cuda_dpposeEstimation.cpp:584

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :      88
            Global    :      34
            Local     :      54
        Regenerable   :       3
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [4.50e+00 ~ 0.4%]
            Writes    :       5 [4.50e+00 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [16] cuda_dpposeEstimation.cpp(622,1)
  -> EXTERN: (624,36) ?1memset
  -> EXTERN: (624,49) ?1memset
  -> EXTERN: (633,12) operator new[](std::size_t)
  -> EXTERN: (634,14) operator new[](std::size_t)
  -> EXTERN: (635,11) operator new[](std::size_t)
  -> EXTERN: (636,21) operator new[](std::size_t)
  -> EXTERN: (637,16) operator new[](std::size_t)
  -> EXTERN: (638,13) operator new[](std::size_t)
  -> EXTERN: (648,11) operator new[](std::size_t)
  -> EXTERN: (649,11) operator new[](std::size_t)
  -> EXTERN: (650,11) operator new[](std::size_t)
  -> EXTERN: (651,11) operator new[](std::size_t)
  -> EXTERN: (654,11) operator new[](std::size_t)
  -> EXTERN: (655,11) operator new[](std::size_t)
  -> EXTERN: (656,12) operator new[](std::size_t)
  -> EXTERN: (657,11) operator new[](std::size_t)
  -> EXTERN: (663,10) std::chrono::_V2::system_clock::now()
  -> (665,10) readValues(char *, float *, int, int, int)
  -> INLINE: (666,2) rowMean(float *, int, int, float *)
  -> INLINE: (667,9) Scalc(float *, int, int, float *)
  -> INLINE: (668,9) rowMean(float *, int, int, float *)
  -> (669,6) mean_of_std_deviation(float *, int, int, float *)
  -> INLINE: (670,2) newScalc(float *, int, int, float)
  -> (671,12) readValues(char *, float *, int, int, int)
  -> INLINE: (672,2) rowMean(float *, int, int, float *)
  -> INLINE: (673,2) Scalc(float *, int, int, float *)
  -> INLINE: (675,2) initializeZero(float *, int, int)
  -> INLINE: (676,2) initializeZero(float *, int, int)
  -> INLINE: (677,2) initializeZero(float *, int, int)
  -> INLINE: (678,2) rowMean(float *, int, int, float *)
  -> INLINE: (680,2) initializeZero(float *, int, int)
  -> INLINE: (681,2) initializeZero(float *, int, int)
  -> INLINE: (683,7) meanCalc(float *, int, int)
  -> INLINE: (685,2) TransposeOnCPU(float *, float *, int, int)
  -> INLINE: (686,2) cpuTransMatrixMult(float *, float *, float *, int, int)
  -> INLINE: (690,3) initialize(float *, float *, int, int)
  -> (692,3) calculateZ(float *, float *, float *, float *, float *, float *, float, float *, float *, int, int, int)
  -> INLINE: (694,3) calculateQ(float *, float *, float *, float, int, int)
    -> EXTERN: (454,31) __cxa_throw_bad_array_new_length()
    -> EXTERN: (454,31) operator new[](std::size_t)
    -> INLINE: (456,2) scalarToMatrixMultiply(float *, float *, float, int, int)
    -> INLINE: (457,2) differenceOfMatrix(float *, float *, float *, int, int)
    -> EXTERN: (459,2) operator delete[](void *)
  -> (696,3) prox_2norm(float *, float *, float *, float, int, int, int)
  -> INLINE: (698,3) updateDualvariable(float *, float, float *, float *, int, int)
  -> INLINE: (699,3) resCalc(float *, float *, float *, float *, float *, float, int, int)
    -> (616,13) febNorm_diff(float *, float *, int, int)
    -> INLINE: (616,40) febNorm(float *, int, int)
    -> (617,18) febNorm_diff(float *, float *, int, int)
    -> INLINE: (617,46) febNorm(float *, int, int)
  -> (703,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> EXTERN: (703,19) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, int)
  -> (703,29) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (703,45) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float)
  -> (703,55) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (703,71) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float)
  -> (703,80) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (703,91) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float)
  -> (703,97) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> EXTERN: (726,10) std::chrono::_V2::system_clock::now()
  -> EXTERN: (728,2) operator delete[](void *)
  -> EXTERN: (729,9) operator delete[](void *)
  -> EXTERN: (730,2) operator delete[](void *)
  -> EXTERN: (731,2) operator delete[](void *)
  -> EXTERN: (732,2) operator delete[](void *)
  -> EXTERN: (733,2) operator delete[](void *)
  -> EXTERN: (734,2) operator delete[](void *)
  -> EXTERN: (735,2) operator delete[](void *)
  -> EXTERN: (736,2) operator delete[](void *)
  -> EXTERN: (737,2) operator delete[](void *)
  -> EXTERN: (738,2) operator delete[](void *)
  -> EXTERN: (739,2) operator delete[](void *)
  -> EXTERN: (740,2) operator delete[](void *)
  -> EXTERN: (741,2) operator delete[](void *)
  -> INLINE (MANUAL): (747,13) std::chrono::duration<float, std::ratio<1L, 1L>>::operator+=(std::chrono::duration<float, std::ratio<1L, 1L>> *, const std::chrono::duration<float, std::ratio<1L, 1L>> &)
    -> INLINE (MANUAL): /usr/include/c++/5/chrono:(315,15) std::chrono::duration<float, std::ratio<1L, 1L>>::count(const std::chrono::duration<float, std::ratio<1L, 1L>> *) const
  -> INLINE (MANUAL): (747,55) std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration, std::chrono::_V2::system_clock::duration>(const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> &, const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> &)
    -> INLINE (MANUAL): /usr/include/c++/5/chrono:(652,16) std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration>::time_since_epoch(const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> *) const
    -> INLINE (MANUAL): /usr/include/c++/5/chrono:(652,43) std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration>::time_since_epoch(const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> *) const
    -> INLINE (MANUAL): /usr/include/c++/5/chrono:(652,43) std::chrono::operator-<int64_t, std::nano, int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &, const std::chrono::duration<int64_t, std::nano> &)
      -> INLINE (MANUAL): (399,14) std::chrono::duration<int64_t, std::nano>::duration<std::chrono::duration<int64_t, std::nano>::rep, void>(std::chrono::duration<int64_t, std::nano> *, const std::chrono::duration<int64_t, std::nano>::rep &)
      -> INLINE (MANUAL): (399,26) std::chrono::duration<int64_t, std::nano>::count(const std::chrono::duration<int64_t, std::nano> *) const
      -> INLINE (MANUAL): (399,48) std::chrono::duration<int64_t, std::nano>::count(const std::chrono::duration<int64_t, std::nano> *) const
  -> INLINE (MANUAL): (747,55) std::chrono::duration_cast<std::chrono::duration<float, std::ratio<1L, 1L>>, int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &)
    -> INLINE (MANUAL): /usr/include/c++/5/chrono:(203,22) std::chrono::__duration_cast_impl<std::chrono::duration<float, std::ratio<1L, 1L>>, std::ratio_divide<std::nano, std::chrono::duration<int64_t, std::ratio<1L, 1L>>::period>, std::__success_type<float>::type, true, false>::__cast<int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &)
      -> INLINE (MANUAL): (162,20) std::chrono::duration<float, std::ratio<1L, 1L>>::duration<std::chrono::duration<float, std::ratio<1L, 1L>>::rep, void>(std::chrono::duration<float, std::ratio<1L, 1L>> *, const std::chrono::duration<float, std::ratio<1L, 1L>>::rep &)
      -> INLINE (MANUAL): (163,29) std::chrono::duration<int64_t, std::nano>::count(const std::chrono::duration<int64_t, std::nano> *) const
  -> (749,7) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (749,33) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float)
  -> INLINE (MANUAL): (749,47) std::chrono::duration<float, std::ratio<1L, 1L>>::count(const std::chrono::duration<float, std::ratio<1L, 1L>> *) const
  -> (749,72) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (749,80) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(94,2) inlined into cuda_dpposeEstimation.cpp(666,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(97,3) inlined into cuda_dpposeEstimation.cpp(666,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 1.750 
      remark #15478: estimated potential speedup: 1.290 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(97,3) inlined into cuda_dpposeEstimation.cpp(666,2)
   <Remainder loop for vectorization>
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(107,2) inlined into cuda_dpposeEstimation.cpp(667,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(109,3) inlined into cuda_dpposeEstimation.cpp(667,9)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(109,3) inlined into cuda_dpposeEstimation.cpp(667,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 2.400 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(109,3) inlined into cuda_dpposeEstimation.cpp(667,9)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=15
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(94,2) inlined into cuda_dpposeEstimation.cpp(668,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(97,3) inlined into cuda_dpposeEstimation.cpp(668,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 1.750 
      remark #15478: estimated potential speedup: 1.290 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(97,3) inlined into cuda_dpposeEstimation.cpp(668,9)
   <Remainder loop for vectorization>
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(135,2) inlined into cuda_dpposeEstimation.cpp(670,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(137,3) inlined into cuda_dpposeEstimation.cpp(670,2)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(137,3) inlined into cuda_dpposeEstimation.cpp(670,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 31 
      remark #15477: vector cost: 8.750 
      remark #15478: estimated potential speedup: 2.220 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(137,3) inlined into cuda_dpposeEstimation.cpp(670,2)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=15
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(94,2) inlined into cuda_dpposeEstimation.cpp(672,2)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ i sum B mean j } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 15 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 108 
   remark #15477: vector cost: 48.120 
   remark #15478: estimated potential speedup: 2.240 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=48

   LOOP BEGIN at cuda_dpposeEstimation.cpp(97,3) inlined into cuda_dpposeEstimation.cpp(672,2)
      remark #25436: completely unrolled by 15   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(107,2) inlined into cuda_dpposeEstimation.cpp(673,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=384

   LOOP BEGIN at cuda_dpposeEstimation.cpp(109,3) inlined into cuda_dpposeEstimation.cpp(673,2)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(109,3) inlined into cuda_dpposeEstimation.cpp(673,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 2.400 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(109,3) inlined into cuda_dpposeEstimation.cpp(673,2)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=15
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(146,2) inlined into cuda_dpposeEstimation.cpp(675,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15306: loop was not vectorized: inner loop was transformed to memset or memcpy   [ cuda_dpposeEstimation.cpp(148,3) ]
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(148,3) inlined into cuda_dpposeEstimation.cpp(675,2)
      remark #25408: memset generated
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
      remark #25015: Estimate of max trip count of loop=1
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(148,3) inlined into cuda_dpposeEstimation.cpp(676,2)
   remark #25408: memset generated
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(146,2) inlined into cuda_dpposeEstimation.cpp(677,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(148,3) inlined into cuda_dpposeEstimation.cpp(677,2)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(148,3) inlined into cuda_dpposeEstimation.cpp(677,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.930 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(148,3) inlined into cuda_dpposeEstimation.cpp(677,2)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=15
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(94,2) inlined into cuda_dpposeEstimation.cpp(678,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(97,3) inlined into cuda_dpposeEstimation.cpp(678,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 1.750 
      remark #15478: estimated potential speedup: 1.290 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(97,3) inlined into cuda_dpposeEstimation.cpp(678,2)
   <Remainder loop for vectorization>
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(146,2) inlined into cuda_dpposeEstimation.cpp(680,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15306: loop was not vectorized: inner loop was transformed to memset or memcpy   [ cuda_dpposeEstimation.cpp(148,3) ]
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(148,3) inlined into cuda_dpposeEstimation.cpp(680,2)
      remark #25408: memset generated
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
      remark #25015: Estimate of max trip count of loop=1
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(146,2) inlined into cuda_dpposeEstimation.cpp(681,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15306: loop was not vectorized: inner loop was transformed to memset or memcpy   [ cuda_dpposeEstimation.cpp(148,3) ]
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(148,3) inlined into cuda_dpposeEstimation.cpp(681,2)
      remark #25408: memset generated
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
      remark #25015: Estimate of max trip count of loop=1
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(160,2) inlined into cuda_dpposeEstimation.cpp(683,7)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at cuda_dpposeEstimation.cpp(162,3) inlined into cuda_dpposeEstimation.cpp(683,7)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 2.500 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(162,3) inlined into cuda_dpposeEstimation.cpp(683,7)
   <Remainder loop for vectorization>
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(177,3) inlined into cuda_dpposeEstimation.cpp(685,2)
   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized   [ cuda_dpposeEstimation.cpp(177,3) ]
   remark #25015: Estimate of max trip count of loop=15

   LOOP BEGIN at cuda_dpposeEstimation.cpp(175,2) inlined into cuda_dpposeEstimation.cpp(685,2)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(175,2) inlined into cuda_dpposeEstimation.cpp(685,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.950 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=96
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(175,2) inlined into cuda_dpposeEstimation.cpp(685,2)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=384
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(188,2) inlined into cuda_dpposeEstimation.cpp(686,2)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ j k fSum matrixTranspose B C i } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=384

   LOOP BEGIN at cuda_dpposeEstimation.cpp(190,3) inlined into cuda_dpposeEstimation.cpp(686,2)
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 15 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 127 
      remark #15477: vector cost: 16.000 
      remark #15478: estimated potential speedup: 7.810 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=48

      LOOP BEGIN at cuda_dpposeEstimation.cpp(193,4) inlined into cuda_dpposeEstimation.cpp(686,2)
         remark #25436: completely unrolled by 15   (pre-vector) 
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(688,15)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=500

   LOOP BEGIN at cuda_dpposeEstimation.cpp(204,2) inlined into cuda_dpposeEstimation.cpp(690,3)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=2

      LOOP BEGIN at cuda_dpposeEstimation.cpp(206,3) inlined into cuda_dpposeEstimation.cpp(690,3)
         remark #25401: memcopy(with guard) generated
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #15542: loop was not vectorized: inner loop was already vectorized
         remark #25015: Estimate of max trip count of loop=1

         LOOP BEGIN at cuda_dpposeEstimation.cpp(206,3) inlined into cuda_dpposeEstimation.cpp(690,3)
         <Peeled loop for vectorization, Multiversioned v2>
            remark #25015: Estimate of max trip count of loop=7
         LOOP END

         LOOP BEGIN at cuda_dpposeEstimation.cpp(206,3) inlined into cuda_dpposeEstimation.cpp(690,3)
         <Multiversioned v2>
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 5 
            remark #15477: vector cost: 0.500 
            remark #15478: estimated potential speedup: 7.960 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=48
         LOOP END

         LOOP BEGIN at cuda_dpposeEstimation.cpp(206,3) inlined into cuda_dpposeEstimation.cpp(690,3)
         <Remainder loop for vectorization, Multiversioned v2>
            remark #25015: Estimate of max trip count of loop=384
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(234,2) inlined into cuda_dpposeEstimation.cpp(694,3)
      remark #25045: Fused Loops: ( 234 443 )

      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=2

      LOOP BEGIN at cuda_dpposeEstimation.cpp(236,3) inlined into cuda_dpposeEstimation.cpp(694,3)
         remark #25045: Fused Loops: ( 236 445 )

         remark #17108: loop was not parallelized: insufficient computational work
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15451: unmasked unaligned unit stride stores: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 14 
         remark #15477: vector cost: 2.120 
         remark #15478: estimated potential speedup: 6.460 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
         remark #25015: Estimate of max trip count of loop=24
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(445,17) inlined into cuda_dpposeEstimation.cpp(694,3)
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(443,9) inlined into cuda_dpposeEstimation.cpp(694,3)
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(574,2) inlined into cuda_dpposeEstimation.cpp(698,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=2

      LOOP BEGIN at cuda_dpposeEstimation.cpp(576,3) inlined into cuda_dpposeEstimation.cpp(698,3)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 13 
         remark #15477: vector cost: 1.750 
         remark #15478: estimated potential speedup: 7.280 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(602,9) inlined into cuda_dpposeEstimation.cpp(699,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=2

      LOOP BEGIN at cuda_dpposeEstimation.cpp(604,17) inlined into cuda_dpposeEstimation.cpp(699,3)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 1.000 
         remark #15478: estimated potential speedup: 7.930 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(602,9) inlined into cuda_dpposeEstimation.cpp(699,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=2

      LOOP BEGIN at cuda_dpposeEstimation.cpp(604,17) inlined into cuda_dpposeEstimation.cpp(699,3)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 1.000 
         remark #15478: estimated potential speedup: 7.930 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(94,2) inlined into cuda_dpposeEstimation.cpp(672,2)
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 15 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 108 
   remark #15477: vector cost: 48.120 
   remark #15478: estimated potential speedup: 2.240 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=48
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(94,2) inlined into cuda_dpposeEstimation.cpp(672,2)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=384
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(188,2) inlined into cuda_dpposeEstimation.cpp(686,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=384

   LOOP BEGIN at cuda_dpposeEstimation.cpp(190,3) inlined into cuda_dpposeEstimation.cpp(686,2)
      remark #17107: loop was not parallelized: inner loop
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 15 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 127 
      remark #15477: vector cost: 16.000 
      remark #15478: estimated potential speedup: 7.810 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=48
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(99,11):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 60 }, types { F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x0000000FF }.
cuda_dpposeEstimation.cpp(99,11):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 60 }, types { F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x00000007F }.
cuda_dpposeEstimation.cpp(99,11):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 60 }, types { F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x0000000FF }.
cuda_dpposeEstimation.cpp(99,11):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 60 }, types { F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x00000007F }.
cuda_dpposeEstimation.cpp(624,36):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
cuda_dpposeEstimation.cpp(624,49):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
cuda_dpposeEstimation.cpp(150,3):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(150,3):remark #34026: call to memset implemented as a call to optimized library version
cuda_dpposeEstimation.cpp(150,3):remark #34014: optimization advice for memset: increase the destination's alignment to 32 (and use __assume_aligned) to increase the width of stores
cuda_dpposeEstimation.cpp(150,3):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
cuda_dpposeEstimation.cpp(150,3):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(150,3):remark #34026: call to memset implemented as a call to optimized library version
cuda_dpposeEstimation.cpp(150,3):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(150,3):remark #34026: call to memset implemented as a call to optimized library version
cuda_dpposeEstimation.cpp(208,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(208,3):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(208,3):remark #34026: call to memcpy implemented as a call to optimized library version
cuda_dpposeEstimation.cpp(622,1):remark #34051: REGISTER ALLOCATION : [main] cuda_dpposeEstimation.cpp:622

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    1040
            Global    :     284
            Local     :     756
        Regenerable   :     155
        Spilled       :      20
        
    Routine stack
        Variables     :     120 bytes*
            Reads     :       8 [1.92e+01 ~ 0.0%]
            Writes    :      26 [4.00e+00 ~ 0.0%]
        Spills        :     248 bytes*
            Reads     :      93 [2.78e+02 ~ 0.3%]
            Writes    :      43 [3.91e+01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: dump_to_file(char *, float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dump_to_file(char *, float *, int, int)) [17] cuda_dpposeEstimation.cpp(55,1)
  -> INLINE (MANUAL): (56,11) std::basic_ofstream<char, std::char_traits<char>>::~basic_ofstream(std::basic_ofstream<char, std::char_traits<char>> *const)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(737,7) std::basic_ofstream<char, std::char_traits<char>>::~basic_ofstream(std::basic_ofstream<char, std::char_traits<char>> *, const long *const *)
      -> INLINE (MANUAL): (738,9) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const)
        -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *)
          -> EXTERN: (282,20) __cxa_call_unexpected
          -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (738,9) std::basic_ostream<char, std::char_traits<char>>::~basic_ostream(std::basic_ostream<char, std::char_traits<char>> *, const long *const *)
        -> INLINE (MANUAL): /usr/include/c++/5/ostream:(93,26) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (738,9) std::basic_filebuf<char, std::char_traits<char>>::~basic_filebuf(std::basic_filebuf<char, std::char_traits<char>> *)
        -> EXTERN: (239,7) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
        -> EXTERN: (239,7) __cxa_call_unexpected
        -> EXTERN: (239,15) std::basic_filebuf<char, std::char_traits<char>>::close(std::basic_filebuf<char, std::char_traits<char>> *)
        -> EXTERN: (239,24) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,24) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
  -> INLINE (MANUAL): (56,11) std::basic_ofstream<char, std::char_traits<char>>::basic_ofstream(std::basic_ofstream<char, std::char_traits<char>> *const)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(682,7) std::basic_ofstream<char, std::char_traits<char>>::basic_ofstream(std::basic_ofstream<char, std::char_traits<char>> *, const long *const *)
      -> INLINE (MANUAL): (682,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const)
        -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *)
          -> EXTERN: (282,20) __cxa_call_unexpected
          -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (682,7) std::basic_filebuf<char, std::char_traits<char>>::~basic_filebuf(std::basic_filebuf<char, std::char_traits<char>> *)
        -> EXTERN: (239,7) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
        -> EXTERN: (239,7) __cxa_call_unexpected
        -> EXTERN: (239,15) std::basic_filebuf<char, std::char_traits<char>>::close(std::basic_filebuf<char, std::char_traits<char>> *)
        -> EXTERN: (239,24) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,24) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
      -> INLINE (MANUAL): (682,7) std::basic_ostream<char, std::char_traits<char>>::~basic_ostream(std::basic_ostream<char, std::char_traits<char>> *, const long *const *)
        -> INLINE (MANUAL): /usr/include/c++/5/ostream:(93,26) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> EXTERN: (682,7) std::basic_filebuf<char, std::char_traits<char>>::basic_filebuf(std::basic_filebuf<char, std::char_traits<char>> *)
      -> INLINE (MANUAL): (682,7) std::basic_ostream<char, std::char_traits<char>>::basic_ostream(std::basic_ostream<char, std::char_traits<char>> *, const long *const *)
        -> INLINE (MANUAL): /usr/include/c++/5/ostream:(384,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(460,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *)
            -> EXTERN: (460,7) std::ios_base::ios_base(std::ios_base *const)
        -> INLINE (MANUAL): /usr/include/c++/5/ostream:(384,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
        -> EXTERN: /usr/include/c++/5/ostream:(385,15) std::basic_ios<char, std::char_traits<char>>::init(std::basic_ios<char, std::char_traits<char>> *, std::basic_streambuf<char, std::char_traits<char>> *)
      -> INLINE (MANUAL): (682,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *const)
        -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(460,7) std::basic_ios<char, std::char_traits<char>>::basic_ios(std::basic_ios<char, std::char_traits<char>> *)
          -> EXTERN: (460,7) std::ios_base::ios_base(std::ios_base *const)
      -> EXTERN: (683,15) std::basic_ios<char, std::char_traits<char>>::init(std::basic_ios<char, std::char_traits<char>> *, std::basic_streambuf<char, std::char_traits<char>> *)
  -> INLINE (MANUAL): (57,5) std::basic_ofstream<char, std::char_traits<char>>::open(std::basic_ofstream<char, std::char_traits<char>> *, const char *, std::ios_base::openmode)
    -> EXTERN: /usr/include/c++/5/fstream:(802,18) std::basic_filebuf<char, std::char_traits<char>>::open(std::basic_filebuf<char, std::char_traits<char>> *, const char *, std::ios_base::openmode)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(802,35) std::operator|(std::_Ios_Openmode, std::_Ios_Openmode)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(803,10) std::basic_ios<char, std::char_traits<char>>::setstate(std::basic_ios<char, std::char_traits<char>> *, std::ios_base::iostate)
      -> EXTERN: /usr/include/c++/5/bits/basic_ios.h:(158,15) std::basic_ios<char, std::char_traits<char>>::clear(std::basic_ios<char, std::char_traits<char>> *, std::ios_base::iostate)
      -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(158,27) std::basic_ios<char, std::char_traits<char>>::rdstate(const std::basic_ios<char, std::char_traits<char>> *) const
      -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(158,37) std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)
    -> EXTERN: /usr/include/c++/5/fstream:(807,10) std::basic_ios<char, std::char_traits<char>>::clear(std::basic_ios<char, std::char_traits<char>> *, std::ios_base::iostate)
  -> (62,6) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float)
  -> (62,25) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (64,5) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE (MANUAL): (65,2) std::basic_ofstream<char, std::char_traits<char>>::~basic_ofstream(std::basic_ofstream<char, std::char_traits<char>> *const)
    -> INLINE (MANUAL): /usr/include/c++/5/fstream:(737,7) std::basic_ofstream<char, std::char_traits<char>>::~basic_ofstream(std::basic_ofstream<char, std::char_traits<char>> *, const long *const *)
      -> INLINE (MANUAL): (738,9) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const)
        -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *)
          -> EXTERN: (282,20) __cxa_call_unexpected
          -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (738,9) std::basic_ostream<char, std::char_traits<char>>::~basic_ostream(std::basic_ostream<char, std::char_traits<char>> *, const long *const *)
        -> INLINE (MANUAL): /usr/include/c++/5/ostream:(93,26) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/bits/basic_ios.h:(282,7) std::basic_ios<char, std::char_traits<char>>::~basic_ios(std::basic_ios<char, std::char_traits<char>> *)
            -> EXTERN: (282,20) __cxa_call_unexpected
            -> EXTERN: (282,22) std::ios_base::~ios_base(std::ios_base *const)
      -> INLINE (MANUAL): (738,9) std::basic_filebuf<char, std::char_traits<char>>::~basic_filebuf(std::basic_filebuf<char, std::char_traits<char>> *)
        -> EXTERN: (239,7) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)
        -> EXTERN: (239,7) __cxa_call_unexpected
        -> EXTERN: (239,15) std::basic_filebuf<char, std::char_traits<char>>::close(std::basic_filebuf<char, std::char_traits<char>> *)
        -> EXTERN: (239,24) std::__basic_file<char>::~__basic_file(std::__basic_file<char> *)
        -> INLINE (MANUAL): (239,24) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *const)
          -> INLINE (MANUAL): /usr/include/c++/5/streambuf:(197,7) std::basic_streambuf<char, std::char_traits<char>>::~basic_streambuf(std::basic_streambuf<char, std::char_traits<char>> *)
            -> EXTERN: (198,9) std::locale::~locale(std::locale *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(60,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ cuda_dpposeEstimation.cpp(62,6) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at cuda_dpposeEstimation.cpp(58,2)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ cuda_dpposeEstimation.cpp(62,6) ]
   remark #17102: loop was not parallelized: not a parallelization candidate
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(55,1):remark #34051: REGISTER ALLOCATION : [_Z12dump_to_filePcPfii] cuda_dpposeEstimation.cpp:55

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0]
        
    Routine temporaries
        Total         :     189
            Global    :      29
            Local     :     160
        Regenerable   :      68
        Spilled       :       8
        
    Routine stack
        Variables     :     536 bytes*
            Reads     :      18 [3.00e+00 ~ 0.7%]
            Writes    :      45 [1.84e+01 ~ 4.1%]
        Spills        :      16 bytes*
            Reads     :       3 [1.18e+01 ~ 2.6%]
            Writes    :       2 [4.40e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: print_matrix(char *, int, int, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (print_matrix(char *, int, int, float *)) [18] cuda_dpposeEstimation.cpp(69,1)
  -> EXTERN: (71,9) printf(const char *, ...)
  -> (76,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float)
  -> (76,20) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (78,14) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(72,9)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:std::basic_ostream<char, std::char_traits<char>>::operator< (76:8) and call:std::operator<<<std::char_traits<char>>(std::basic_ostream< (78:14)

   LOOP BEGIN at cuda_dpposeEstimation.cpp(74,10)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(69,1):remark #34051: REGISTER ALLOCATION : [_Z12print_matrixPciiPf] cuda_dpposeEstimation.cpp:69

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r12-r15 zmm0]
        
    Routine temporaries
        Total         :      37
            Global    :      20
            Local     :      17
        Regenerable   :      11
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [1.17e+01 ~ 3.0%]
            Writes    :       5 [1.17e+01 ~ 3.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: displayValues(float *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (displayValues(float *, int)) [19] cuda_dpposeEstimation.cpp(83,1)
  -> INLINE (MANUAL): (84,7) std::ios_base::precision(std::ios_base *, std::streamsize)
  -> (87,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (87,32) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float)
  -> (87,47) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(85,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(83,1):remark #34051: REGISTER ALLOCATION : [_Z13displayValuesPfi] cuda_dpposeEstimation.cpp:83

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rsi rdi r12-r14 zmm0]
        
    Routine temporaries
        Total         :      28
            Global    :      16
            Local     :      12
        Regenerable   :       6
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [2.70e+00 ~ 2.8%]
            Writes    :       3 [2.70e+00 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: rowMean(float *, int, int, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (rowMean(float *, int, int, float *)) [20] cuda_dpposeEstimation.cpp(92,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(94,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(97,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(97,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 5.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(97,3)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(92,1):remark #34051: REGISTER ALLOCATION : [_Z7rowMeanPfiiS_] cuda_dpposeEstimation.cpp:92

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r12 r14-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :      59
            Global    :      32
            Local     :      27
        Regenerable   :       6
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [3.60e+00 ~ 0.5%]
            Writes    :       4 [3.60e+00 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Scalc(float *, int, int, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Scalc(float *, int, int, float *)) [21] cuda_dpposeEstimation.cpp(106,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(107,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(109,3)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(109,3)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 8.360 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(109,3)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(109,3)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(109,3)
   <Multiversioned v2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(109,3)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(106,1):remark #34051: REGISTER ALLOCATION : [_Z5ScalcPfiiS_] cuda_dpposeEstimation.cpp:106

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :      81
            Global    :      35
            Local     :      46
        Regenerable   :       2
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :      29 [9.00e-01 ~ 0.1%]
            Writes    :       6 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: newScalc(float *, int, int, float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (newScalc(float *, int, int, float)) [22] cuda_dpposeEstimation.cpp(134,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(135,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(137,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(137,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 31 
      remark #15477: vector cost: 4.370 
      remark #15478: estimated potential speedup: 5.660 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(137,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(137,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(134,1):remark #34051: REGISTER ALLOCATION : [_Z8newScalcPfiif] cuda_dpposeEstimation.cpp:134

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rsi rdi r8-r13 zmm0-zmm5]
        
    Routine temporaries
        Total         :      64
            Global    :      31
            Local     :      33
        Regenerable   :       2
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       2 [1.80e+00 ~ 0.2%]
            Writes    :       2 [1.80e+00 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: initializeZero(float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (initializeZero(float *, int, int)) [23] cuda_dpposeEstimation.cpp(145,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(146,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(148,3)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(148,3)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.620 
         remark #15478: estimated potential speedup: 5.330 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(148,3)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(150,3):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(150,3):remark #34026: call to memset implemented as a call to optimized library version
cuda_dpposeEstimation.cpp(145,1):remark #34051: REGISTER ALLOCATION : [_Z14initializeZeroPfii] cuda_dpposeEstimation.cpp:145

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      24
            Global    :      17
            Local     :       7
        Regenerable   :       3
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       3 [1.00e+01 ~ 2.3%]
            Writes    :       2 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: meanCalc(float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (meanCalc(float *, int, int)) [24] cuda_dpposeEstimation.cpp(156,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(160,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(162,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(162,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 8.080 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(162,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(162,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(156,1):remark #34051: REGISTER ALLOCATION : [_Z8meanCalcPfii] cuda_dpposeEstimation.cpp:156

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r13 zmm0-zmm10]
        
    Routine temporaries
        Total         :      81
            Global    :      32
            Local     :      49
        Regenerable   :       6
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [2.70e+00 ~ 0.3%]
            Writes    :       3 [2.70e+00 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: TransposeOnCPU(float *, float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (TransposeOnCPU(float *, float *, int, int)) [25] cuda_dpposeEstimation.cpp(173,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(175,2)
   remark #25445: Loop Interchange not done due to: Data Dependencies
   remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
   remark #25447: Dependence found between following statements:  [179 -> (Flow) 179]
   remark #25447: Dependence found between following statements:  [179 -> (Anti) 179]
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(177,3)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=15
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(177,3)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 4.620 
      remark #15478: estimated potential speedup: 1.060 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(177,3)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(177,3)
   <Multiversioned v2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(177,3)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(173,1):remark #34051: REGISTER ALLOCATION : [_Z14TransposeOnCPUPfS_ii] cuda_dpposeEstimation.cpp:173

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      98
            Global    :      40
            Local     :      58
        Regenerable   :       1
        Spilled       :      17
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      96 bytes*
            Reads     :      41 [2.70e+01 ~ 2.8%]
            Writes    :      16 [2.07e+01 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: cpuTransMatrixMult(float *, float *, float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (cpuTransMatrixMult(float *, float *, float *, int, int)) [26] cuda_dpposeEstimation.cpp(186,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(188,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(190,3)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(193,4)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(193,4)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 5.500 
         remark #15478: estimated potential speedup: 1.420 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(193,4)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(186,1):remark #34051: REGISTER ALLOCATION : [_Z18cpuTransMatrixMultPfS_S_ii] cuda_dpposeEstimation.cpp:186

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm12]
        
    Routine temporaries
        Total         :      86
            Global    :      44
            Local     :      42
        Regenerable   :       5
        Spilled       :      19
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     136 bytes*
            Reads     :      17 [1.83e+02 ~ 2.8%]
            Writes    :      17 [8.79e+01 ~ 1.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: initialize(float *, float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (initialize(float *, float *, int, int)) [27] cuda_dpposeEstimation.cpp(203,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(204,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between variable2[i*col+j] (206:3) and variable[i*col+j] (208:3)

   LOOP BEGIN at cuda_dpposeEstimation.cpp(206,3)
      remark #25401: memcopy(with guard) generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at cuda_dpposeEstimation.cpp(206,3)
      <Multiversioned v2>
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(206,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(208,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(208,3):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(208,3):remark #34026: call to memcpy implemented as a call to optimized library version
cuda_dpposeEstimation.cpp(203,1):remark #34051: REGISTER ALLOCATION : [_Z10initializePfS_ii] cuda_dpposeEstimation.cpp:203

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      45
            Global    :      22
            Local     :      23
        Regenerable   :       2
        Spilled       :      10
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      80 bytes*
            Reads     :      27 [2.39e+01 ~ 6.5%]
            Writes    :      10 [2.70e+00 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: cpuMatrixMult(float *, float *, float *, int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (cpuMatrixMult(float *, float *, float *, int, int, int)) [28] cuda_dpposeEstimation.cpp(214,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(217,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 5.500 
         remark #15478: estimated potential speedup: 1.420 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(214,1):remark #34051: REGISTER ALLOCATION : [_Z13cpuMatrixMultPfS_S_iii] cuda_dpposeEstimation.cpp:214

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm12]
        
    Routine temporaries
        Total         :      88
            Global    :      46
            Local     :      42
        Regenerable   :       5
        Spilled       :      21
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     144 bytes*
            Reads     :      18 [1.89e+02 ~ 2.8%]
            Writes    :      18 [9.54e+01 ~ 1.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: scalarToMatrixMultiply(float *, float *, float, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (scalarToMatrixMultiply(float *, float *, float, int, int)) [29] cuda_dpposeEstimation.cpp(233,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(234,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(236,3)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(236,3)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 6.680 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(236,3)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(236,3)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(236,3)
   <Multiversioned v2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(236,3)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(233,1):remark #34051: REGISTER ALLOCATION : [_Z22scalarToMatrixMultiplyPfS_fii] cuda_dpposeEstimation.cpp:233

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :      75
            Global    :      35
            Local     :      40
        Regenerable   :       1
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      64 bytes*
            Reads     :      38 [1.12e+00 ~ 0.2%]
            Writes    :       8 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: sumOfMatrix(float *, float *, float *, float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (sumOfMatrix(float *, float *, float *, float *, int, int)) [30] cuda_dpposeEstimation.cpp(244,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(245,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(247,3)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(247,3)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 6.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(247,3)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(247,3)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(247,3)
   <Multiversioned v2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(247,3)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(244,1):remark #34051: REGISTER ALLOCATION : [_Z11sumOfMatrixPfS_S_S_ii] cuda_dpposeEstimation.cpp:244

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :      97
            Global    :      42
            Local     :      55
        Regenerable   :       1
        Spilled       :      15
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     120 bytes*
            Reads     :      32 [4.80e+01 ~ 5.9%]
            Writes    :      15 [1.62e+01 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: addScalarToDiagonal(float *, float *, float, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (addScalarToDiagonal(float *, float *, float, int, int)) [31] cuda_dpposeEstimation.cpp(255,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(256,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between Zden[i*col+j] (266:4) and Zden[i*col+j] (266:4)

   LOOP BEGIN at cuda_dpposeEstimation.cpp(258,3)
   <Predicate Optimized v1>
      remark #25423: Condition at line 260 hoisted out of this loop
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between Zden[i*col+j] (266:4) and BBt[i*col+j] (266:4)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(258,3)
   <Remainder, Predicate Optimized v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(258,3)
   <Predicate Optimized v2>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between Zden[i*col+j] (266:4) and BBt[i*col+j] (266:4)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(258,3)
   <Remainder, Predicate Optimized v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(255,1):remark #34051: REGISTER ALLOCATION : [_Z19addScalarToDiagonalPfS_fii] cuda_dpposeEstimation.cpp:255

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      58
            Global    :      28
            Local     :      30
        Regenerable   :       1
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       7 [9.90e+00 ~ 1.1%]
            Writes    :       7 [9.90e+00 ~ 1.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: eye(float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (eye(float *, int, int)) [32] cuda_dpposeEstimation.cpp(273,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(274,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(276,17)
   <Peeled loop for vectorization, Predicate Optimized v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(276,17)
   <Predicate Optimized v1>
      remark #25423: Condition at line 278 hoisted out of this loop
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 7.220 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(276,17)
   <Remainder loop for vectorization, Predicate Optimized v1>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(276,17)
   <Remainder loop for vectorization, Predicate Optimized v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(276,17)
   <Peeled loop for vectorization, Predicate Optimized v2>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(276,17)
   <Predicate Optimized v2>
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 7.220 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(276,17)
   <Remainder loop for vectorization, Predicate Optimized v2>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(276,17)
   <Remainder loop for vectorization, Predicate Optimized v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(273,1):remark #34051: REGISTER ALLOCATION : [_Z3eyePfii] cuda_dpposeEstimation.cpp:273

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      86
            Global    :      46
            Local     :      40
        Regenerable   :       5
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       7 [1.35e+01 ~ 0.7%]
            Writes    :       7 [1.35e+01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: matInv(float *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (matInv(float *, int)) [33] cuda_dpposeEstimation.cpp(326,1)
  -> EXTERN: (327,6) _vla_free(void *, long)
  -> EXTERN: (327,6) _vla_alloc(long)
  -> EXTERN: (330,8) LAPACKE_sgetrf(int, int, int, float *, int, int *)
  -> EXTERN: (333,10) _vla_free(void *, long)
  -> EXTERN: (336,8) LAPACKE_sgetri(int, int, float *, int, const int *)
  -> EXTERN: (338,9) _vla_free(void *, long)


    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(326,1):remark #34051: REGISTER ALLOCATION : [_Z6matInvPfi] cuda_dpposeEstimation.cpp:326

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rsi rdi r8-r9 r12 r14-r15]
        
    Routine temporaries
        Total         :      45
            Global    :      15
            Local     :      30
        Regenerable   :       2
        Spilled       :       4
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       1 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calculateZ_preZden(float *, float *, float *, float *, float *, float *, float, float *, float *, int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calculateZ_preZden(float *, float *, float *, float *, float *, float *, float, float *, float *, int, int, int)) [34] cuda_dpposeEstimation.cpp(402,1)
  -> EXTERN: (403,38) operator new[](std::size_t)
  -> EXTERN: (403,38) __cxa_throw_bad_array_new_length()
  -> EXTERN: (404,39) operator new[](std::size_t)
  -> EXTERN: (404,39) __cxa_throw_bad_array_new_length()
  -> EXTERN: (405,39) operator new[](std::size_t)
  -> EXTERN: (405,39) __cxa_throw_bad_array_new_length()
  -> EXTERN: (406,38) operator new[](std::size_t)
  -> EXTERN: (406,38) __cxa_throw_bad_array_new_length()
  -> INLINE: (420,9) cpuMatrixMult(float *, float *, float *, int, int, int)
  -> INLINE: (424,9) scalarToMatrixMultiply(float *, float *, float, int, int)
  -> INLINE: (428,9) sumOfMatrix(float *, float *, float *, float *, int, int)
  -> INLINE: (432,9) cpuMatrixMult(float *, float *, float *, int, int, int)
  -> EXTERN: (434,2) operator delete[](void *)
  -> EXTERN: (435,9) operator delete[](void *)
  -> EXTERN: (436,9) operator delete[](void *)
  -> EXTERN: (437,9) operator delete[](void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(412,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(414,17)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(414,17)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 1.120 
      remark #15478: estimated potential speedup: 6.970 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(414,17)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(414,17)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(217,2) inlined into cuda_dpposeEstimation.cpp(420,9)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(420,9)
   <Distributed chunk1>
      remark #25087: Preprocess Loopnests: Sinking 1 Stmts Into Inner LOOP to Create Perfect Nest 
      remark #25426: Loop Distributed (2 way) 
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(420,9)
      <Distributed chunk1>
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.620 
         remark #15478: estimated potential speedup: 5.330 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(420,9)
      <Remainder loop for vectorization, Distributed chunk1>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(217,2) inlined into cuda_dpposeEstimation.cpp(420,9)
<Distributed chunk2>
   remark #25444: Loopnest Interchanged: ( 1 2 3 ) --> ( 1 3 2 )
   remark #25229: Loop multiversioned for Trip-count
   remark #25459: Loopnest replaced by matmul intrinsic
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(217,2) inlined into cuda_dpposeEstimation.cpp(420,9)
<Distributed chunk2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #25440: unrolled and jammed by 4   (pre-vector) 
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(420,9)
   <Distributed chunk2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #25440: unrolled and jammed by 4   (pre-vector) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(420,9)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(420,9)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 8 
         remark #15451: unmasked unaligned unit stride stores: 16 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 168 
         remark #15477: vector cost: 17.870 
         remark #15478: estimated potential speedup: 6.950 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(420,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(420,9)
   <Remainder, Distributed chunk2>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(420,9)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(420,9)
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 5 
         remark #15451: unmasked unaligned unit stride stores: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 42 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 6.350 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(420,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(217,2) inlined into cuda_dpposeEstimation.cpp(420,9)
<Remainder, Distributed chunk2>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(420,9)
   <Distributed chunk2>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(420,9)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(420,9)
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 11 
         remark #15477: vector cost: 1.000 
         remark #15478: estimated potential speedup: 7.600 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(420,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(234,2) inlined into cuda_dpposeEstimation.cpp(424,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(236,3) inlined into cuda_dpposeEstimation.cpp(424,9)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(236,3) inlined into cuda_dpposeEstimation.cpp(424,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 6.680 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(236,3) inlined into cuda_dpposeEstimation.cpp(424,9)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(236,3) inlined into cuda_dpposeEstimation.cpp(424,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(245,2) inlined into cuda_dpposeEstimation.cpp(428,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(247,3) inlined into cuda_dpposeEstimation.cpp(428,9)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(247,3) inlined into cuda_dpposeEstimation.cpp(428,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 6.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(247,3) inlined into cuda_dpposeEstimation.cpp(428,9)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(247,3) inlined into cuda_dpposeEstimation.cpp(428,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(217,2) inlined into cuda_dpposeEstimation.cpp(432,9)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(219,3) inlined into cuda_dpposeEstimation.cpp(432,9)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(432,9)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(432,9)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 5.500 
         remark #15478: estimated potential speedup: 1.420 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at cuda_dpposeEstimation.cpp(222,4) inlined into cuda_dpposeEstimation.cpp(432,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(221,3):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
cuda_dpposeEstimation.cpp(221,3):remark #34026: call to memset implemented as a call to optimized library version
cuda_dpposeEstimation.cpp(402,1):remark #34051: REGISTER ALLOCATION : [_Z18calculateZ_preZdenPfS_S_S_S_S_fS_S_iii] cuda_dpposeEstimation.cpp:402

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     733
            Global    :     279
            Local     :     454
        Regenerable   :      26
        Spilled       :      77
        
    Routine stack
        Variables     :     288 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      36 [1.62e+01 ~ 0.0%]
        Spills        :     640 bytes*
            Reads     :     178 [1.93e+03 ~ 5.6%]
            Writes    :      88 [4.71e+02 ~ 1.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: differenceOfMatrix(float *, float *, float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (differenceOfMatrix(float *, float *, float *, int, int)) [35] cuda_dpposeEstimation.cpp(442,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(443,9)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(445,17)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(445,17)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 6.590 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(445,17)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(445,17)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(445,17)
   <Multiversioned v2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(445,17)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(442,1):remark #34051: REGISTER ALLOCATION : [_Z18differenceOfMatrixPfS_S_ii] cuda_dpposeEstimation.cpp:442

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      85
            Global    :      38
            Local     :      47
        Regenerable   :       1
        Spilled       :      11
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :      62 [2.15e+00 ~ 0.3%]
            Writes    :       9 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calculateQ(float *, float *, float *, float, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calculateQ(float *, float *, float *, float, int, int)) [36] cuda_dpposeEstimation.cpp(453,1)
  -> EXTERN: (454,31) operator new[](std::size_t)
  -> EXTERN: (454,31) __cxa_throw_bad_array_new_length()
  -> INLINE: (456,2) scalarToMatrixMultiply(float *, float *, float, int, int)
  -> INLINE: (457,2) differenceOfMatrix(float *, float *, float *, int, int)
  -> EXTERN: (459,2) operator delete[](void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(234,2) inlined into cuda_dpposeEstimation.cpp(456,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(236,3) inlined into cuda_dpposeEstimation.cpp(456,2)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(236,3) inlined into cuda_dpposeEstimation.cpp(456,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 6.680 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(236,3) inlined into cuda_dpposeEstimation.cpp(456,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(236,3) inlined into cuda_dpposeEstimation.cpp(456,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(443,9) inlined into cuda_dpposeEstimation.cpp(457,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(445,17) inlined into cuda_dpposeEstimation.cpp(457,2)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(445,17) inlined into cuda_dpposeEstimation.cpp(457,2)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 6.590 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(445,17) inlined into cuda_dpposeEstimation.cpp(457,2)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(445,17) inlined into cuda_dpposeEstimation.cpp(457,2)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(445,17) inlined into cuda_dpposeEstimation.cpp(457,2)
   <Multiversioned v2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(445,17) inlined into cuda_dpposeEstimation.cpp(457,2)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(453,1):remark #34051: REGISTER ALLOCATION : [_Z10calculateQPfS_S_fii] cuda_dpposeEstimation.cpp:453

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     142
            Global    :      62
            Local     :      80
        Regenerable   :       4
        Spilled       :      12
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :      21 [1.57e+01 ~ 1.0%]
            Writes    :      10 [3.23e+00 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: updateDualvariable(float *, float, float *, float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (updateDualvariable(float *, float, float *, float *, int, int)) [37] cuda_dpposeEstimation.cpp(573,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(574,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(576,3)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(576,3)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 13 
      remark #15477: vector cost: 1.370 
      remark #15478: estimated potential speedup: 6.850 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(576,3)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(576,3)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(576,3)
   <Multiversioned v2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(576,3)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(573,1):remark #34051: REGISTER ALLOCATION : [_Z18updateDualvariablePffS_S_ii] cuda_dpposeEstimation.cpp:573

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :      94
            Global    :      40
            Local     :      54
        Regenerable   :       1
        Spilled       :       9
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :      21 [2.97e+01 ~ 3.8%]
            Writes    :       9 [6.30e+00 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: febNorm(float *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (febNorm(float *, int, int)) [38] cuda_dpposeEstimation.cpp(599,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(602,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(604,17)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(604,17)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 6.700 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(604,17)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(604,17)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(599,1):remark #34051: REGISTER ALLOCATION : [_Z7febNormPfii] cuda_dpposeEstimation.cpp:599

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r13 zmm0-zmm7]
        
    Routine temporaries
        Total         :      78
            Global    :      30
            Local     :      48
        Regenerable   :       3
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [2.70e+00 ~ 0.2%]
            Writes    :       3 [2.70e+00 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: resCalc(float *, float *, float *, float *, float *, float, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (resCalc(float *, float *, float *, float *, float *, float, int, int)) [39] cuda_dpposeEstimation.cpp(614,1)
  -> INLINE: (616,13) febNorm_diff(float *, float *, int, int)
  -> INLINE: (616,40) febNorm(float *, int, int)
  -> INLINE: (617,18) febNorm_diff(float *, float *, int, int)
  -> INLINE: (617,46) febNorm(float *, int, int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cuda_dpposeEstimation.cpp(587,9) inlined into cuda_dpposeEstimation.cpp(616,13)
   remark #25045: Fused Loops: ( 587 602 )

   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(589,17) inlined into cuda_dpposeEstimation.cpp(616,13)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(589,17) inlined into cuda_dpposeEstimation.cpp(616,13)
      remark #25045: Fused Loops: ( 589 604 )

      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 22 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 6.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(604,17) inlined into cuda_dpposeEstimation.cpp(616,40)
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(589,17) inlined into cuda_dpposeEstimation.cpp(616,13)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(589,17) inlined into cuda_dpposeEstimation.cpp(616,13)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(602,9) inlined into cuda_dpposeEstimation.cpp(616,40)
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(587,9) inlined into cuda_dpposeEstimation.cpp(617,18)
   remark #25045: Fused Loops: ( 587 602 )

   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cuda_dpposeEstimation.cpp(589,17) inlined into cuda_dpposeEstimation.cpp(617,18)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(589,17) inlined into cuda_dpposeEstimation.cpp(617,18)
      remark #25045: Fused Loops: ( 589 604 )

      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 22 
      remark #15477: vector cost: 2.370 
      remark #15478: estimated potential speedup: 6.860 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(604,17) inlined into cuda_dpposeEstimation.cpp(617,46)
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(589,17) inlined into cuda_dpposeEstimation.cpp(617,18)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at cuda_dpposeEstimation.cpp(589,17) inlined into cuda_dpposeEstimation.cpp(617,18)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at cuda_dpposeEstimation.cpp(602,9) inlined into cuda_dpposeEstimation.cpp(617,46)
LOOP END

    Report from: Code generation optimizations [cg]

cuda_dpposeEstimation.cpp(614,1):remark #34051: REGISTER ALLOCATION : [_Z7resCalcPfS_S_S_S_fii] cuda_dpposeEstimation.cpp:614

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     248
            Global    :      69
            Local     :     179
        Regenerable   :       7
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       4 [4.89e+00 ~ 0.1%]
            Writes    :       7 [1.13e+01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::ios_base::precision(std::ios_base *, std::streamsize)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::ios_base::precision(std::ios_base *, std::streamsize)) /usr/include/c++/5/bits/ios_base.h(699,5)

===========================================================================

Begin optimization report for: std::ctype<char>::widen(const std::ctype<char> *, char) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::ctype<char>::widen(const std::ctype<char> *, char) const) /usr/include/c++/5/bits/locale_facets.h(873,7)

===========================================================================

Begin optimization report for: std::chrono::duration<int64_t, std::nano>::count(const std::chrono::duration<int64_t, std::nano> *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::duration<int64_t, std::nano>::count(const std::chrono::duration<int64_t, std::nano> *) const) /usr/include/c++/5/chrono(279,2)

===========================================================================

Begin optimization report for: std::chrono::duration<int64_t, std::nano>::duration<std::chrono::duration<int64_t, std::nano>::rep, void>(std::chrono::duration<int64_t, std::nano> *, const std::chrono::duration<int64_t, std::nano>::rep &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::duration<int64_t, std::nano>::duration<std::chrono::duration<int64_t, std::nano>::rep, void>(std::chrono::duration<int64_t, std::nano> *, const std::chrono::duration<int64_t, std::nano>::rep &)) /usr/include/c++/5/chrono(264,35)

===========================================================================

Begin optimization report for: std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration>::time_since_epoch(const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration>::time_since_epoch(const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> *) const) /usr/include/c++/5/chrono(569,2)

===========================================================================

Begin optimization report for: std::chrono::duration<double, std::ratio<1L, 1L>>::count(const std::chrono::duration<double, std::ratio<1L, 1L>> *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::duration<double, std::ratio<1L, 1L>>::count(const std::chrono::duration<double, std::ratio<1L, 1L>> *) const) /usr/include/c++/5/chrono(279,2)

===========================================================================

Begin optimization report for: std::chrono::duration<double, std::ratio<1L, 1L>>::duration<std::chrono::duration<double, std::ratio<1L, 1L>>::rep, void>(std::chrono::duration<double, std::ratio<1L, 1L>> *, const std::chrono::duration<double, std::ratio<1L, 1L>>::rep &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::duration<double, std::ratio<1L, 1L>>::duration<std::chrono::duration<double, std::ratio<1L, 1L>>::rep, void>(std::chrono::duration<double, std::ratio<1L, 1L>> *, const std::chrono::duration<double, std::ratio<1L, 1L>>::rep &)) /usr/include/c++/5/chrono(264,35)

===========================================================================

Begin optimization report for: std::chrono::__duration_cast_impl<std::chrono::duration<double, std::ratio<1L, 1L>>, std::ratio_divide<std::nano, std::chrono::duration<int64_t, std::ratio<1L, 1L>>::period>, std::__success_type<double>::type, true, false>::__cast<int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::__duration_cast_impl<std::chrono::duration<double, std::ratio<1L, 1L>>, std::ratio_divide<std::nano, std::chrono::duration<int64_t, std::ratio<1L, 1L>>::period>, std::__success_type<double>::type, true, false>::__cast<int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &)) /usr/include/c++/5/chrono(160,4)

===========================================================================

Begin optimization report for: std::chrono::duration<float, std::ratio<1L, 1L>>::count(const std::chrono::duration<float, std::ratio<1L, 1L>> *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::duration<float, std::ratio<1L, 1L>>::count(const std::chrono::duration<float, std::ratio<1L, 1L>> *) const) /usr/include/c++/5/chrono(279,2)

===========================================================================

Begin optimization report for: std::chrono::duration<float, std::ratio<1L, 1L>>::operator+=(std::chrono::duration<float, std::ratio<1L, 1L>> *, const std::chrono::duration<float, std::ratio<1L, 1L>> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::duration<float, std::ratio<1L, 1L>>::operator+=(std::chrono::duration<float, std::ratio<1L, 1L>> *, const std::chrono::duration<float, std::ratio<1L, 1L>> &)) /usr/include/c++/5/chrono(314,2)

===========================================================================

Begin optimization report for: std::chrono::duration<float, std::ratio<1L, 1L>>::duration<std::chrono::duration<float, std::ratio<1L, 1L>>::rep, void>(std::chrono::duration<float, std::ratio<1L, 1L>> *, const std::chrono::duration<float, std::ratio<1L, 1L>>::rep &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::duration<float, std::ratio<1L, 1L>>::duration<std::chrono::duration<float, std::ratio<1L, 1L>>::rep, void>(std::chrono::duration<float, std::ratio<1L, 1L>> *, const std::chrono::duration<float, std::ratio<1L, 1L>>::rep &)) /usr/include/c++/5/chrono(264,35)

===========================================================================

Begin optimization report for: std::chrono::__duration_cast_impl<std::chrono::duration<float, std::ratio<1L, 1L>>, std::ratio_divide<std::nano, std::chrono::duration<int64_t, std::ratio<1L, 1L>>::period>, std::__success_type<float>::type, true, false>::__cast<int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::__duration_cast_impl<std::chrono::duration<float, std::ratio<1L, 1L>>, std::ratio_divide<std::nano, std::chrono::duration<int64_t, std::ratio<1L, 1L>>::period>, std::__success_type<float>::type, true, false>::__cast<int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &)) /usr/include/c++/5/chrono(160,4)

===========================================================================

Begin optimization report for: std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration, std::chrono::_V2::system_clock::duration>(const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> &, const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration, std::chrono::_V2::system_clock::duration>(const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> &, const std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::_V2::system_clock::duration> &)) /usr/include/c++/5/chrono(652,7)

===========================================================================

Begin optimization report for: std::chrono::operator-<int64_t, std::nano, int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &, const std::chrono::duration<int64_t, std::nano> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::chrono::operator-<int64_t, std::nano, int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &, const std::chrono::duration<int64_t, std::nano> &)) /usr/include/c++/5/chrono(395,7)

===========================================================================

Begin optimization report for: std::chrono::duration_cast<std::chrono::duration<double, std::ratio<1L, 1L>>, int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (std::chrono::duration_cast<std::chrono::duration<double, std::ratio<1L, 1L>>, int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &)) [79] /usr/include/c++/5/chrono(195,7)
  -> INLINE (MANUAL): (203,22) std::chrono::__duration_cast_impl<std::chrono::duration<double, std::ratio<1L, 1L>>, std::ratio_divide<std::nano, std::chrono::duration<int64_t, std::ratio<1L, 1L>>::period>, std::__success_type<double>::type, true, false>::__cast<int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &)
    -> INLINE (MANUAL): (162,20) std::chrono::duration<double, std::ratio<1L, 1L>>::duration<std::chrono::duration<double, std::ratio<1L, 1L>>::rep, void>(std::chrono::duration<double, std::ratio<1L, 1L>> *, const std::chrono::duration<double, std::ratio<1L, 1L>>::rep &)
    -> INLINE (MANUAL): (163,29) std::chrono::duration<int64_t, std::nano>::count(const std::chrono::duration<int64_t, std::nano> *) const


    Report from: Code generation optimizations [cg]

/usr/include/c++/5/chrono(195,7):remark #34051: REGISTER ALLOCATION : [_ZNSt6chrono13duration_castINS_8durationIdSt5ratioILl1ELl1EEEElS2_ILl1ELl1000000000EEEENSt9enable_ifIXsr3std6chrono13__is_durationIT_EE5valueES7_E4typeERKNS1_IT0_T1_EE] /usr/include/c++/5/chrono:195

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rdi zmm0]
        
    Routine temporaries
        Total         :      11
            Global    :       0
            Local     :      11
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::chrono::duration_cast<std::chrono::duration<float, std::ratio<1L, 1L>>, int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (std::chrono::duration_cast<std::chrono::duration<float, std::ratio<1L, 1L>>, int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &)) [80] /usr/include/c++/5/chrono(195,7)
  -> INLINE (MANUAL): (203,22) std::chrono::__duration_cast_impl<std::chrono::duration<float, std::ratio<1L, 1L>>, std::ratio_divide<std::nano, std::chrono::duration<int64_t, std::ratio<1L, 1L>>::period>, std::__success_type<float>::type, true, false>::__cast<int64_t, std::nano>(const std::chrono::duration<int64_t, std::nano> &)
    -> INLINE (MANUAL): (162,20) std::chrono::duration<float, std::ratio<1L, 1L>>::duration<std::chrono::duration<float, std::ratio<1L, 1L>>::rep, void>(std::chrono::duration<float, std::ratio<1L, 1L>> *, const std::chrono::duration<float, std::ratio<1L, 1L>>::rep &)
    -> INLINE (MANUAL): (163,29) std::chrono::duration<int64_t, std::nano>::count(const std::chrono::duration<int64_t, std::nano> *) const


    Report from: Code generation optimizations [cg]

/usr/include/c++/5/chrono(195,7):remark #34051: REGISTER ALLOCATION : [_ZNSt6chrono13duration_castINS_8durationIfSt5ratioILl1ELl1EEEElS2_ILl1ELl1000000000EEEENSt9enable_ifIXsr3std6chrono13__is_durationIT_EE5valueES7_E4typeERKNS1_IT0_T1_EE] /usr/include/c++/5/chrono:195

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rdi zmm0]
        
    Routine temporaries
        Total         :      11
            Global    :       0
            Local     :      11
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::operator|(std::_Ios_Openmode, std::_Ios_Openmode)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::operator|(std::_Ios_Openmode, std::_Ios_Openmode)) /usr/include/c++/5/bits/ios_base.h(130,3)

===========================================================================

Begin optimization report for: std::operator&(std::_Ios_Iostate, std::_Ios_Iostate)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::operator&(std::_Ios_Iostate, std::_Ios_Iostate)) /usr/include/c++/5/bits/ios_base.h(166,3)

===========================================================================

Begin optimization report for: std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)) /usr/include/c++/5/bits/ios_base.h(170,3)

===========================================================================

Begin optimization report for: std::__check_facet<std::basic_ios<char, std::char_traits<char>>::__ctype_type>(const std::basic_ios<char, std::char_traits<char>>::__ctype_type *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::__check_facet<std::basic_ios<char, std::char_traits<char>>::__ctype_type>(const std::basic_ios<char, std::char_traits<char>>::__ctype_type *)) /usr/include/c++/5/bits/basic_ios.h(48,5)

===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [87] <compiler generated>
  -> EXTERN: /usr/include/c++/5/iostream:(74,25) __cxa_atexit()
  -> EXTERN: /usr/include/c++/5/iostream:(74,25) std::ios_base::Init::Init(std::ios_base::Init *)


    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       7
            Local     :       6
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
